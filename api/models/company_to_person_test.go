// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCompanyToPeople(t *testing.T) {
	t.Parallel()

	query := CompanyToPeople()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCompanyToPeopleDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompanyToPeople().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompanyToPeopleQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CompanyToPeople().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompanyToPeople().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompanyToPeopleSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompanyToPersonSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompanyToPeople().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompanyToPeopleExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CompanyToPersonExists(ctx, tx, o.CompanyID, o.PersonID)
	if err != nil {
		t.Errorf("Unable to check if CompanyToPerson exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CompanyToPersonExists to return true, but got false.")
	}
}

func testCompanyToPeopleFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	companyToPersonFound, err := FindCompanyToPerson(ctx, tx, o.CompanyID, o.PersonID)
	if err != nil {
		t.Error(err)
	}

	if companyToPersonFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCompanyToPeopleBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CompanyToPeople().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCompanyToPeopleOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CompanyToPeople().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCompanyToPeopleAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	companyToPersonOne := &CompanyToPerson{}
	companyToPersonTwo := &CompanyToPerson{}
	if err = randomize.Struct(seed, companyToPersonOne, companyToPersonDBTypes, false, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}
	if err = randomize.Struct(seed, companyToPersonTwo, companyToPersonDBTypes, false, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = companyToPersonOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = companyToPersonTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CompanyToPeople().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCompanyToPeopleCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	companyToPersonOne := &CompanyToPerson{}
	companyToPersonTwo := &CompanyToPerson{}
	if err = randomize.Struct(seed, companyToPersonOne, companyToPersonDBTypes, false, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}
	if err = randomize.Struct(seed, companyToPersonTwo, companyToPersonDBTypes, false, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = companyToPersonOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = companyToPersonTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompanyToPeople().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testCompanyToPeopleInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompanyToPeople().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompanyToPeopleInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(companyToPersonColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CompanyToPeople().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompanyToPersonToOneCompanyUsingCompany(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CompanyToPerson
	var foreign Company

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, companyToPersonDBTypes, false, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CompanyID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Company().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CompanyToPersonSlice{&local}
	if err = local.L.LoadCompany(ctx, tx, false, (*[]*CompanyToPerson)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Company == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Company = nil
	if err = local.L.LoadCompany(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Company == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCompanyToPersonToOnePersonUsingPerson(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CompanyToPerson
	var foreign Person

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, companyToPersonDBTypes, false, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PersonID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Person().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CompanyToPersonSlice{&local}
	if err = local.L.LoadPerson(ctx, tx, false, (*[]*CompanyToPerson)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Person == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Person = nil
	if err = local.L.LoadPerson(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Person == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCompanyToPersonToOneSetOpCompanyUsingCompany(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CompanyToPerson
	var b, c Company

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyToPersonDBTypes, false, strmangle.SetComplement(companyToPersonPrimaryKeyColumns, companyToPersonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Company{&b, &c} {
		err = a.SetCompany(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Company != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CompanyToPeople[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CompanyID != x.ID {
			t.Error("foreign key was wrong value", a.CompanyID)
		}

		if exists, err := CompanyToPersonExists(ctx, tx, a.CompanyID, a.PersonID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testCompanyToPersonToOneSetOpPersonUsingPerson(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CompanyToPerson
	var b, c Person

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyToPersonDBTypes, false, strmangle.SetComplement(companyToPersonPrimaryKeyColumns, companyToPersonColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Person{&b, &c} {
		err = a.SetPerson(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Person != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CompanyToPeople[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PersonID != x.ID {
			t.Error("foreign key was wrong value", a.PersonID)
		}

		if exists, err := CompanyToPersonExists(ctx, tx, a.CompanyID, a.PersonID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testCompanyToPeopleReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompanyToPeopleReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompanyToPersonSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompanyToPeopleSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CompanyToPeople().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	companyToPersonDBTypes = map[string]string{`CompanyID`: `uuid`, `PersonID`: `uuid`, `Relations`: `ARRAYUSER-DEFINED`, `VotingRights`: `real`, `Ownership`: `real`}
	_                      = bytes.MinRead
)

func testCompanyToPeopleUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(companyToPersonPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(companyToPersonAllColumns) == len(companyToPersonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompanyToPeople().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCompanyToPeopleSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(companyToPersonAllColumns) == len(companyToPersonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToPerson{}
	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompanyToPeople().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, companyToPersonDBTypes, true, companyToPersonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(companyToPersonAllColumns, companyToPersonPrimaryKeyColumns) {
		fields = companyToPersonAllColumns
	} else {
		fields = strmangle.SetComplement(
			companyToPersonAllColumns,
			companyToPersonPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CompanyToPersonSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCompanyToPeopleUpsert(t *testing.T) {
	t.Parallel()

	if len(companyToPersonAllColumns) == len(companyToPersonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CompanyToPerson{}
	if err = randomize.Struct(seed, &o, companyToPersonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CompanyToPerson: %s", err)
	}

	count, err := CompanyToPeople().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, companyToPersonDBTypes, false, companyToPersonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompanyToPerson struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CompanyToPerson: %s", err)
	}

	count, err = CompanyToPeople().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BadCompaniesAlias is an object representing the database table.
type BadCompaniesAlias struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UpdatedAt    time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	BadCompanyID null.String `boil:"bad_company_id" json:"bad_company_id,omitempty" toml:"bad_company_id" yaml:"bad_company_id,omitempty"`
	Name         string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	NameVector   null.String `boil:"name_vector" json:"name_vector,omitempty" toml:"name_vector" yaml:"name_vector,omitempty"`
	Type         string      `boil:"type" json:"type" toml:"type" yaml:"type"`

	R *badCompaniesAliasR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L badCompaniesAliasL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BadCompaniesAliasColumns = struct {
	ID           string
	UpdatedAt    string
	CreatedAt    string
	BadCompanyID string
	Name         string
	NameVector   string
	Type         string
}{
	ID:           "id",
	UpdatedAt:    "updated_at",
	CreatedAt:    "created_at",
	BadCompanyID: "bad_company_id",
	Name:         "name",
	NameVector:   "name_vector",
	Type:         "type",
}

// Generated where

var BadCompaniesAliasWhere = struct {
	ID           whereHelperstring
	UpdatedAt    whereHelpertime_Time
	CreatedAt    whereHelpertime_Time
	BadCompanyID whereHelpernull_String
	Name         whereHelperstring
	NameVector   whereHelpernull_String
	Type         whereHelperstring
}{
	ID:           whereHelperstring{field: "\"bad_companies_aliases\".\"id\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"bad_companies_aliases\".\"updated_at\""},
	CreatedAt:    whereHelpertime_Time{field: "\"bad_companies_aliases\".\"created_at\""},
	BadCompanyID: whereHelpernull_String{field: "\"bad_companies_aliases\".\"bad_company_id\""},
	Name:         whereHelperstring{field: "\"bad_companies_aliases\".\"name\""},
	NameVector:   whereHelpernull_String{field: "\"bad_companies_aliases\".\"name_vector\""},
	Type:         whereHelperstring{field: "\"bad_companies_aliases\".\"type\""},
}

// BadCompaniesAliasRels is where relationship names are stored.
var BadCompaniesAliasRels = struct {
	BadCompany string
}{
	BadCompany: "BadCompany",
}

// badCompaniesAliasR is where relationships are stored.
type badCompaniesAliasR struct {
	BadCompany *BadCompany
}

// NewStruct creates a new relationship struct
func (*badCompaniesAliasR) NewStruct() *badCompaniesAliasR {
	return &badCompaniesAliasR{}
}

// badCompaniesAliasL is where Load methods for each relationship are stored.
type badCompaniesAliasL struct{}

var (
	badCompaniesAliasAllColumns            = []string{"id", "updated_at", "created_at", "bad_company_id", "name", "name_vector", "type"}
	badCompaniesAliasColumnsWithoutDefault = []string{"bad_company_id", "name", "name_vector", "type"}
	badCompaniesAliasColumnsWithDefault    = []string{"id", "updated_at", "created_at"}
	badCompaniesAliasPrimaryKeyColumns     = []string{"id"}
)

type (
	// BadCompaniesAliasSlice is an alias for a slice of pointers to BadCompaniesAlias.
	// This should generally be used opposed to []BadCompaniesAlias.
	BadCompaniesAliasSlice []*BadCompaniesAlias

	badCompaniesAliasQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	badCompaniesAliasType                 = reflect.TypeOf(&BadCompaniesAlias{})
	badCompaniesAliasMapping              = queries.MakeStructMapping(badCompaniesAliasType)
	badCompaniesAliasPrimaryKeyMapping, _ = queries.BindMapping(badCompaniesAliasType, badCompaniesAliasMapping, badCompaniesAliasPrimaryKeyColumns)
	badCompaniesAliasInsertCacheMut       sync.RWMutex
	badCompaniesAliasInsertCache          = make(map[string]insertCache)
	badCompaniesAliasUpdateCacheMut       sync.RWMutex
	badCompaniesAliasUpdateCache          = make(map[string]updateCache)
	badCompaniesAliasUpsertCacheMut       sync.RWMutex
	badCompaniesAliasUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single badCompaniesAlias record from the query.
func (q badCompaniesAliasQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BadCompaniesAlias, error) {
	o := &BadCompaniesAlias{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bad_companies_aliases")
	}

	return o, nil
}

// All returns all BadCompaniesAlias records from the query.
func (q badCompaniesAliasQuery) All(ctx context.Context, exec boil.ContextExecutor) (BadCompaniesAliasSlice, error) {
	var o []*BadCompaniesAlias

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BadCompaniesAlias slice")
	}

	return o, nil
}

// Count returns the count of all BadCompaniesAlias records in the query.
func (q badCompaniesAliasQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bad_companies_aliases rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q badCompaniesAliasQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bad_companies_aliases exists")
	}

	return count > 0, nil
}

// BadCompany pointed to by the foreign key.
func (o *BadCompaniesAlias) BadCompany(mods ...qm.QueryMod) badCompanyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BadCompanyID),
	}

	queryMods = append(queryMods, mods...)

	query := BadCompanies(queryMods...)
	queries.SetFrom(query.Query, "\"bad_companies\"")

	return query
}

// LoadBadCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (badCompaniesAliasL) LoadBadCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBadCompaniesAlias interface{}, mods queries.Applicator) error {
	var slice []*BadCompaniesAlias
	var object *BadCompaniesAlias

	if singular {
		object = maybeBadCompaniesAlias.(*BadCompaniesAlias)
	} else {
		slice = *maybeBadCompaniesAlias.(*[]*BadCompaniesAlias)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &badCompaniesAliasR{}
		}
		if !queries.IsNil(object.BadCompanyID) {
			args = append(args, object.BadCompanyID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &badCompaniesAliasR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BadCompanyID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BadCompanyID) {
				args = append(args, obj.BadCompanyID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`bad_companies`), qm.WhereIn(`bad_companies.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BadCompany")
	}

	var resultSlice []*BadCompany
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BadCompany")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bad_companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bad_companies")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BadCompany = foreign
		if foreign.R == nil {
			foreign.R = &badCompanyR{}
		}
		foreign.R.BadCompaniesAliases = append(foreign.R.BadCompaniesAliases, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BadCompanyID, foreign.ID) {
				local.R.BadCompany = foreign
				if foreign.R == nil {
					foreign.R = &badCompanyR{}
				}
				foreign.R.BadCompaniesAliases = append(foreign.R.BadCompaniesAliases, local)
				break
			}
		}
	}

	return nil
}

// SetBadCompany of the badCompaniesAlias to the related item.
// Sets o.R.BadCompany to related.
// Adds o to related.R.BadCompaniesAliases.
func (o *BadCompaniesAlias) SetBadCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BadCompany) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bad_companies_aliases\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"bad_company_id"}),
		strmangle.WhereClause("\"", "\"", 2, badCompaniesAliasPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BadCompanyID, related.ID)
	if o.R == nil {
		o.R = &badCompaniesAliasR{
			BadCompany: related,
		}
	} else {
		o.R.BadCompany = related
	}

	if related.R == nil {
		related.R = &badCompanyR{
			BadCompaniesAliases: BadCompaniesAliasSlice{o},
		}
	} else {
		related.R.BadCompaniesAliases = append(related.R.BadCompaniesAliases, o)
	}

	return nil
}

// RemoveBadCompany relationship.
// Sets o.R.BadCompany to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BadCompaniesAlias) RemoveBadCompany(ctx context.Context, exec boil.ContextExecutor, related *BadCompany) error {
	var err error

	queries.SetScanner(&o.BadCompanyID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("bad_company_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.BadCompany = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BadCompaniesAliases {
		if queries.Equal(o.BadCompanyID, ri.BadCompanyID) {
			continue
		}

		ln := len(related.R.BadCompaniesAliases)
		if ln > 1 && i < ln-1 {
			related.R.BadCompaniesAliases[i] = related.R.BadCompaniesAliases[ln-1]
		}
		related.R.BadCompaniesAliases = related.R.BadCompaniesAliases[:ln-1]
		break
	}
	return nil
}

// BadCompaniesAliases retrieves all the records using an executor.
func BadCompaniesAliases(mods ...qm.QueryMod) badCompaniesAliasQuery {
	mods = append(mods, qm.From("\"bad_companies_aliases\""))
	return badCompaniesAliasQuery{NewQuery(mods...)}
}

// FindBadCompaniesAlias retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBadCompaniesAlias(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*BadCompaniesAlias, error) {
	badCompaniesAliasObj := &BadCompaniesAlias{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bad_companies_aliases\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, badCompaniesAliasObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bad_companies_aliases")
	}

	return badCompaniesAliasObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BadCompaniesAlias) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bad_companies_aliases provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(badCompaniesAliasColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	badCompaniesAliasInsertCacheMut.RLock()
	cache, cached := badCompaniesAliasInsertCache[key]
	badCompaniesAliasInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			badCompaniesAliasAllColumns,
			badCompaniesAliasColumnsWithDefault,
			badCompaniesAliasColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(badCompaniesAliasType, badCompaniesAliasMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(badCompaniesAliasType, badCompaniesAliasMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bad_companies_aliases\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bad_companies_aliases\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bad_companies_aliases")
	}

	if !cached {
		badCompaniesAliasInsertCacheMut.Lock()
		badCompaniesAliasInsertCache[key] = cache
		badCompaniesAliasInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the BadCompaniesAlias.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BadCompaniesAlias) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	badCompaniesAliasUpdateCacheMut.RLock()
	cache, cached := badCompaniesAliasUpdateCache[key]
	badCompaniesAliasUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			badCompaniesAliasAllColumns,
			badCompaniesAliasPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bad_companies_aliases, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bad_companies_aliases\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, badCompaniesAliasPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(badCompaniesAliasType, badCompaniesAliasMapping, append(wl, badCompaniesAliasPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bad_companies_aliases row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bad_companies_aliases")
	}

	if !cached {
		badCompaniesAliasUpdateCacheMut.Lock()
		badCompaniesAliasUpdateCache[key] = cache
		badCompaniesAliasUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q badCompaniesAliasQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bad_companies_aliases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bad_companies_aliases")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BadCompaniesAliasSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badCompaniesAliasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bad_companies_aliases\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, badCompaniesAliasPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in badCompaniesAlias slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all badCompaniesAlias")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BadCompaniesAlias) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bad_companies_aliases provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(badCompaniesAliasColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	badCompaniesAliasUpsertCacheMut.RLock()
	cache, cached := badCompaniesAliasUpsertCache[key]
	badCompaniesAliasUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			badCompaniesAliasAllColumns,
			badCompaniesAliasColumnsWithDefault,
			badCompaniesAliasColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			badCompaniesAliasAllColumns,
			badCompaniesAliasPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bad_companies_aliases, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(badCompaniesAliasPrimaryKeyColumns))
			copy(conflict, badCompaniesAliasPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bad_companies_aliases\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(badCompaniesAliasType, badCompaniesAliasMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(badCompaniesAliasType, badCompaniesAliasMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bad_companies_aliases")
	}

	if !cached {
		badCompaniesAliasUpsertCacheMut.Lock()
		badCompaniesAliasUpsertCache[key] = cache
		badCompaniesAliasUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single BadCompaniesAlias record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BadCompaniesAlias) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BadCompaniesAlias provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), badCompaniesAliasPrimaryKeyMapping)
	sql := "DELETE FROM \"bad_companies_aliases\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bad_companies_aliases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bad_companies_aliases")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q badCompaniesAliasQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no badCompaniesAliasQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bad_companies_aliases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bad_companies_aliases")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BadCompaniesAliasSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badCompaniesAliasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bad_companies_aliases\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, badCompaniesAliasPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from badCompaniesAlias slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bad_companies_aliases")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BadCompaniesAlias) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBadCompaniesAlias(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BadCompaniesAliasSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BadCompaniesAliasSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badCompaniesAliasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bad_companies_aliases\".* FROM \"bad_companies_aliases\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, badCompaniesAliasPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BadCompaniesAliasSlice")
	}

	*o = slice

	return nil
}

// BadCompaniesAliasExists checks if the BadCompaniesAlias row exists.
func BadCompaniesAliasExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bad_companies_aliases\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bad_companies_aliases exists")
	}

	return exists, nil
}

// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCompanyToCompanies(t *testing.T) {
	t.Parallel()

	query := CompanyToCompanies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCompanyToCompaniesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompanyToCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompanyToCompaniesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CompanyToCompanies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompanyToCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompanyToCompaniesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompanyToCompanySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CompanyToCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompanyToCompaniesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CompanyToCompanyExists(ctx, tx, o.MotherCompanyID, o.DaughterCompanyID)
	if err != nil {
		t.Errorf("Unable to check if CompanyToCompany exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CompanyToCompanyExists to return true, but got false.")
	}
}

func testCompanyToCompaniesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	companyToCompanyFound, err := FindCompanyToCompany(ctx, tx, o.MotherCompanyID, o.DaughterCompanyID)
	if err != nil {
		t.Error(err)
	}

	if companyToCompanyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCompanyToCompaniesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CompanyToCompanies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCompanyToCompaniesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CompanyToCompanies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCompanyToCompaniesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	companyToCompanyOne := &CompanyToCompany{}
	companyToCompanyTwo := &CompanyToCompany{}
	if err = randomize.Struct(seed, companyToCompanyOne, companyToCompanyDBTypes, false, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}
	if err = randomize.Struct(seed, companyToCompanyTwo, companyToCompanyDBTypes, false, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = companyToCompanyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = companyToCompanyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CompanyToCompanies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCompanyToCompaniesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	companyToCompanyOne := &CompanyToCompany{}
	companyToCompanyTwo := &CompanyToCompany{}
	if err = randomize.Struct(seed, companyToCompanyOne, companyToCompanyDBTypes, false, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}
	if err = randomize.Struct(seed, companyToCompanyTwo, companyToCompanyDBTypes, false, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = companyToCompanyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = companyToCompanyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompanyToCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testCompanyToCompaniesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompanyToCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompanyToCompaniesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(companyToCompanyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CompanyToCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompanyToCompanyToOneCompanyUsingDaughterCompany(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CompanyToCompany
	var foreign Company

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, companyToCompanyDBTypes, false, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DaughterCompanyID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DaughterCompany().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CompanyToCompanySlice{&local}
	if err = local.L.LoadDaughterCompany(ctx, tx, false, (*[]*CompanyToCompany)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DaughterCompany == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DaughterCompany = nil
	if err = local.L.LoadDaughterCompany(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DaughterCompany == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCompanyToCompanyToOneCompanyUsingMotherCompany(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CompanyToCompany
	var foreign Company

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, companyToCompanyDBTypes, false, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MotherCompanyID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MotherCompany().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CompanyToCompanySlice{&local}
	if err = local.L.LoadMotherCompany(ctx, tx, false, (*[]*CompanyToCompany)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MotherCompany == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MotherCompany = nil
	if err = local.L.LoadMotherCompany(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MotherCompany == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCompanyToCompanyToOneSetOpCompanyUsingDaughterCompany(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CompanyToCompany
	var b, c Company

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyToCompanyDBTypes, false, strmangle.SetComplement(companyToCompanyPrimaryKeyColumns, companyToCompanyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Company{&b, &c} {
		err = a.SetDaughterCompany(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DaughterCompany != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DaughterCompanyCompanyToCompanies[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DaughterCompanyID != x.ID {
			t.Error("foreign key was wrong value", a.DaughterCompanyID)
		}

		if exists, err := CompanyToCompanyExists(ctx, tx, a.MotherCompanyID, a.DaughterCompanyID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testCompanyToCompanyToOneSetOpCompanyUsingMotherCompany(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CompanyToCompany
	var b, c Company

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyToCompanyDBTypes, false, strmangle.SetComplement(companyToCompanyPrimaryKeyColumns, companyToCompanyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Company{&b, &c} {
		err = a.SetMotherCompany(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MotherCompany != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MotherCompanyCompanyToCompanies[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MotherCompanyID != x.ID {
			t.Error("foreign key was wrong value", a.MotherCompanyID)
		}

		if exists, err := CompanyToCompanyExists(ctx, tx, a.MotherCompanyID, a.DaughterCompanyID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testCompanyToCompaniesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompanyToCompaniesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompanyToCompanySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompanyToCompaniesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CompanyToCompanies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	companyToCompanyDBTypes = map[string]string{`MotherCompanyID`: `uuid`, `DaughterCompanyID`: `uuid`, `Relations`: `ARRAYUSER-DEFINED`, `VotingRights`: `real`, `Ownership`: `real`}
	_                       = bytes.MinRead
)

func testCompanyToCompaniesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(companyToCompanyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(companyToCompanyAllColumns) == len(companyToCompanyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompanyToCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCompanyToCompaniesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(companyToCompanyAllColumns) == len(companyToCompanyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CompanyToCompany{}
	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CompanyToCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, companyToCompanyDBTypes, true, companyToCompanyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(companyToCompanyAllColumns, companyToCompanyPrimaryKeyColumns) {
		fields = companyToCompanyAllColumns
	} else {
		fields = strmangle.SetComplement(
			companyToCompanyAllColumns,
			companyToCompanyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CompanyToCompanySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCompanyToCompaniesUpsert(t *testing.T) {
	t.Parallel()

	if len(companyToCompanyAllColumns) == len(companyToCompanyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CompanyToCompany{}
	if err = randomize.Struct(seed, &o, companyToCompanyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CompanyToCompany: %s", err)
	}

	count, err := CompanyToCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, companyToCompanyDBTypes, false, companyToCompanyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CompanyToCompany struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CompanyToCompany: %s", err)
	}

	count, err = CompanyToCompanies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BadPerson is an object representing the database table.
type BadPerson struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	FullName   null.String `boil:"full_name" json:"full_name,omitempty" toml:"full_name" yaml:"full_name,omitempty"`
	Type       null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	Source     null.String `boil:"source" json:"source,omitempty" toml:"source" yaml:"source,omitempty"`
	Address    null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	UpdatedAt  time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	NameVector null.String `boil:"name_vector" json:"name_vector,omitempty" toml:"name_vector" yaml:"name_vector,omitempty"`

	R *badPersonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L badPersonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BadPersonColumns = struct {
	ID         string
	FullName   string
	Type       string
	Source     string
	Address    string
	UpdatedAt  string
	CreatedAt  string
	NameVector string
}{
	ID:         "id",
	FullName:   "full_name",
	Type:       "type",
	Source:     "source",
	Address:    "address",
	UpdatedAt:  "updated_at",
	CreatedAt:  "created_at",
	NameVector: "name_vector",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BadPersonWhere = struct {
	ID         whereHelperstring
	FullName   whereHelpernull_String
	Type       whereHelpernull_String
	Source     whereHelpernull_String
	Address    whereHelpernull_String
	UpdatedAt  whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
	NameVector whereHelpernull_String
}{
	ID:         whereHelperstring{field: "\"bad_persons\".\"id\""},
	FullName:   whereHelpernull_String{field: "\"bad_persons\".\"full_name\""},
	Type:       whereHelpernull_String{field: "\"bad_persons\".\"type\""},
	Source:     whereHelpernull_String{field: "\"bad_persons\".\"source\""},
	Address:    whereHelpernull_String{field: "\"bad_persons\".\"address\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"bad_persons\".\"updated_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"bad_persons\".\"created_at\""},
	NameVector: whereHelpernull_String{field: "\"bad_persons\".\"name_vector\""},
}

// BadPersonRels is where relationship names are stored.
var BadPersonRels = struct {
	BadPersonsAliases string
}{
	BadPersonsAliases: "BadPersonsAliases",
}

// badPersonR is where relationships are stored.
type badPersonR struct {
	BadPersonsAliases BadPersonsAliasSlice
}

// NewStruct creates a new relationship struct
func (*badPersonR) NewStruct() *badPersonR {
	return &badPersonR{}
}

// badPersonL is where Load methods for each relationship are stored.
type badPersonL struct{}

var (
	badPersonAllColumns            = []string{"id", "full_name", "type", "source", "address", "updated_at", "created_at", "name_vector"}
	badPersonColumnsWithoutDefault = []string{"full_name", "type", "source", "address", "name_vector"}
	badPersonColumnsWithDefault    = []string{"id", "updated_at", "created_at"}
	badPersonPrimaryKeyColumns     = []string{"id"}
)

type (
	// BadPersonSlice is an alias for a slice of pointers to BadPerson.
	// This should generally be used opposed to []BadPerson.
	BadPersonSlice []*BadPerson
	// BadPersonHook is the signature for custom BadPerson hook methods
	BadPersonHook func(context.Context, boil.ContextExecutor, *BadPerson) error

	badPersonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	badPersonType                 = reflect.TypeOf(&BadPerson{})
	badPersonMapping              = queries.MakeStructMapping(badPersonType)
	badPersonPrimaryKeyMapping, _ = queries.BindMapping(badPersonType, badPersonMapping, badPersonPrimaryKeyColumns)
	badPersonInsertCacheMut       sync.RWMutex
	badPersonInsertCache          = make(map[string]insertCache)
	badPersonUpdateCacheMut       sync.RWMutex
	badPersonUpdateCache          = make(map[string]updateCache)
	badPersonUpsertCacheMut       sync.RWMutex
	badPersonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var badPersonBeforeInsertHooks []BadPersonHook
var badPersonBeforeUpdateHooks []BadPersonHook
var badPersonBeforeDeleteHooks []BadPersonHook
var badPersonBeforeUpsertHooks []BadPersonHook

var badPersonAfterInsertHooks []BadPersonHook
var badPersonAfterSelectHooks []BadPersonHook
var badPersonAfterUpdateHooks []BadPersonHook
var badPersonAfterDeleteHooks []BadPersonHook
var badPersonAfterUpsertHooks []BadPersonHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BadPerson) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range badPersonBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BadPerson) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range badPersonBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BadPerson) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range badPersonBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BadPerson) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range badPersonBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BadPerson) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range badPersonAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BadPerson) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range badPersonAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BadPerson) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range badPersonAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BadPerson) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range badPersonAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BadPerson) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range badPersonAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBadPersonHook registers your hook function for all future operations.
func AddBadPersonHook(hookPoint boil.HookPoint, badPersonHook BadPersonHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		badPersonBeforeInsertHooks = append(badPersonBeforeInsertHooks, badPersonHook)
	case boil.BeforeUpdateHook:
		badPersonBeforeUpdateHooks = append(badPersonBeforeUpdateHooks, badPersonHook)
	case boil.BeforeDeleteHook:
		badPersonBeforeDeleteHooks = append(badPersonBeforeDeleteHooks, badPersonHook)
	case boil.BeforeUpsertHook:
		badPersonBeforeUpsertHooks = append(badPersonBeforeUpsertHooks, badPersonHook)
	case boil.AfterInsertHook:
		badPersonAfterInsertHooks = append(badPersonAfterInsertHooks, badPersonHook)
	case boil.AfterSelectHook:
		badPersonAfterSelectHooks = append(badPersonAfterSelectHooks, badPersonHook)
	case boil.AfterUpdateHook:
		badPersonAfterUpdateHooks = append(badPersonAfterUpdateHooks, badPersonHook)
	case boil.AfterDeleteHook:
		badPersonAfterDeleteHooks = append(badPersonAfterDeleteHooks, badPersonHook)
	case boil.AfterUpsertHook:
		badPersonAfterUpsertHooks = append(badPersonAfterUpsertHooks, badPersonHook)
	}
}

// One returns a single badPerson record from the query.
func (q badPersonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BadPerson, error) {
	o := &BadPerson{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bad_persons")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BadPerson records from the query.
func (q badPersonQuery) All(ctx context.Context, exec boil.ContextExecutor) (BadPersonSlice, error) {
	var o []*BadPerson

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BadPerson slice")
	}

	if len(badPersonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BadPerson records in the query.
func (q badPersonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bad_persons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q badPersonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bad_persons exists")
	}

	return count > 0, nil
}

// BadPersonsAliases retrieves all the bad_persons_alias's BadPersonsAliases with an executor.
func (o *BadPerson) BadPersonsAliases(mods ...qm.QueryMod) badPersonsAliasQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bad_persons_aliases\".\"bad_person_id\"=?", o.ID),
	)

	query := BadPersonsAliases(queryMods...)
	queries.SetFrom(query.Query, "\"bad_persons_aliases\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"bad_persons_aliases\".*"})
	}

	return query
}

// LoadBadPersonsAliases allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (badPersonL) LoadBadPersonsAliases(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBadPerson interface{}, mods queries.Applicator) error {
	var slice []*BadPerson
	var object *BadPerson

	if singular {
		object = maybeBadPerson.(*BadPerson)
	} else {
		slice = *maybeBadPerson.(*[]*BadPerson)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &badPersonR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &badPersonR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`bad_persons_aliases`), qm.WhereIn(`bad_persons_aliases.bad_person_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bad_persons_aliases")
	}

	var resultSlice []*BadPersonsAlias
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bad_persons_aliases")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bad_persons_aliases")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bad_persons_aliases")
	}

	if len(badPersonsAliasAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BadPersonsAliases = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &badPersonsAliasR{}
			}
			foreign.R.BadPerson = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BadPersonID {
				local.R.BadPersonsAliases = append(local.R.BadPersonsAliases, foreign)
				if foreign.R == nil {
					foreign.R = &badPersonsAliasR{}
				}
				foreign.R.BadPerson = local
				break
			}
		}
	}

	return nil
}

// AddBadPersonsAliases adds the given related objects to the existing relationships
// of the bad_person, optionally inserting them as new records.
// Appends related to o.R.BadPersonsAliases.
// Sets related.R.BadPerson appropriately.
func (o *BadPerson) AddBadPersonsAliases(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BadPersonsAlias) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BadPersonID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bad_persons_aliases\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"bad_person_id"}),
				strmangle.WhereClause("\"", "\"", 2, badPersonsAliasPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BadPersonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &badPersonR{
			BadPersonsAliases: related,
		}
	} else {
		o.R.BadPersonsAliases = append(o.R.BadPersonsAliases, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &badPersonsAliasR{
				BadPerson: o,
			}
		} else {
			rel.R.BadPerson = o
		}
	}
	return nil
}

// BadPersons retrieves all the records using an executor.
func BadPersons(mods ...qm.QueryMod) badPersonQuery {
	mods = append(mods, qm.From("\"bad_persons\""))
	return badPersonQuery{NewQuery(mods...)}
}

// FindBadPerson retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBadPerson(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*BadPerson, error) {
	badPersonObj := &BadPerson{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bad_persons\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, badPersonObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bad_persons")
	}

	return badPersonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BadPerson) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bad_persons provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(badPersonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	badPersonInsertCacheMut.RLock()
	cache, cached := badPersonInsertCache[key]
	badPersonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			badPersonAllColumns,
			badPersonColumnsWithDefault,
			badPersonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(badPersonType, badPersonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(badPersonType, badPersonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bad_persons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bad_persons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bad_persons")
	}

	if !cached {
		badPersonInsertCacheMut.Lock()
		badPersonInsertCache[key] = cache
		badPersonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BadPerson.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BadPerson) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	badPersonUpdateCacheMut.RLock()
	cache, cached := badPersonUpdateCache[key]
	badPersonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			badPersonAllColumns,
			badPersonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bad_persons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bad_persons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, badPersonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(badPersonType, badPersonMapping, append(wl, badPersonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bad_persons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bad_persons")
	}

	if !cached {
		badPersonUpdateCacheMut.Lock()
		badPersonUpdateCache[key] = cache
		badPersonUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q badPersonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bad_persons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bad_persons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BadPersonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badPersonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bad_persons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, badPersonPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in badPerson slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all badPerson")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BadPerson) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bad_persons provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(badPersonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	badPersonUpsertCacheMut.RLock()
	cache, cached := badPersonUpsertCache[key]
	badPersonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			badPersonAllColumns,
			badPersonColumnsWithDefault,
			badPersonColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			badPersonAllColumns,
			badPersonPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bad_persons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(badPersonPrimaryKeyColumns))
			copy(conflict, badPersonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bad_persons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(badPersonType, badPersonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(badPersonType, badPersonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bad_persons")
	}

	if !cached {
		badPersonUpsertCacheMut.Lock()
		badPersonUpsertCache[key] = cache
		badPersonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BadPerson record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BadPerson) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BadPerson provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), badPersonPrimaryKeyMapping)
	sql := "DELETE FROM \"bad_persons\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bad_persons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bad_persons")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q badPersonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no badPersonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bad_persons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bad_persons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BadPersonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(badPersonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badPersonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bad_persons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, badPersonPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from badPerson slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bad_persons")
	}

	if len(badPersonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BadPerson) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBadPerson(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BadPersonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BadPersonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badPersonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bad_persons\".* FROM \"bad_persons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, badPersonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BadPersonSlice")
	}

	*o = slice

	return nil
}

// BadPersonExists checks if the BadPerson row exists.
func BadPersonExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bad_persons\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bad_persons exists")
	}

	return exists, nil
}

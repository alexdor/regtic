// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// BadPerson is an object representing the database table.
type BadPerson struct {
	ID                     string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	FullName               null.String       `boil:"full_name" json:"fullName,omitempty" toml:"fullName" yaml:"fullName,omitempty"`
	Type                   string            `boil:"type" json:"type" toml:"type" yaml:"type"`
	Source                 null.String       `boil:"source" json:"source,omitempty" toml:"source" yaml:"source,omitempty"`
	UpdatedAt              time.Time         `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt              time.Time         `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	NameVector             null.String       `boil:"name_vector" json:"nameVector,omitempty" toml:"nameVector" yaml:"nameVector,omitempty"`
	CitizenshipCountryCode types.StringArray `boil:"citizenship_country_code" json:"citizenshipCountryCode" toml:"citizenshipCountryCode" yaml:"citizenshipCountryCode"`

	R *badPersonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L badPersonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BadPersonColumns = struct {
	ID                     string
	FullName               string
	Type                   string
	Source                 string
	UpdatedAt              string
	CreatedAt              string
	NameVector             string
	CitizenshipCountryCode string
}{
	ID:                     "id",
	FullName:               "full_name",
	Type:                   "type",
	Source:                 "source",
	UpdatedAt:              "updated_at",
	CreatedAt:              "created_at",
	NameVector:             "name_vector",
	CitizenshipCountryCode: "citizenship_country_code",
}

// Generated where

var BadPersonWhere = struct {
	ID                     whereHelperstring
	FullName               whereHelpernull_String
	Type                   whereHelperstring
	Source                 whereHelpernull_String
	UpdatedAt              whereHelpertime_Time
	CreatedAt              whereHelpertime_Time
	NameVector             whereHelpernull_String
	CitizenshipCountryCode whereHelpertypes_StringArray
}{
	ID:                     whereHelperstring{field: "\"bad_persons\".\"id\""},
	FullName:               whereHelpernull_String{field: "\"bad_persons\".\"full_name\""},
	Type:                   whereHelperstring{field: "\"bad_persons\".\"type\""},
	Source:                 whereHelpernull_String{field: "\"bad_persons\".\"source\""},
	UpdatedAt:              whereHelpertime_Time{field: "\"bad_persons\".\"updated_at\""},
	CreatedAt:              whereHelpertime_Time{field: "\"bad_persons\".\"created_at\""},
	NameVector:             whereHelpernull_String{field: "\"bad_persons\".\"name_vector\""},
	CitizenshipCountryCode: whereHelpertypes_StringArray{field: "\"bad_persons\".\"citizenship_country_code\""},
}

// BadPersonRels is where relationship names are stored.
var BadPersonRels = struct {
	Persons             string
	BadPersonsAddresses string
	BadPersonsAllNames  string
}{
	Persons:             "Persons",
	BadPersonsAddresses: "BadPersonsAddresses",
	BadPersonsAllNames:  "BadPersonsAllNames",
}

// badPersonR is where relationships are stored.
type badPersonR struct {
	Persons             PersonSlice
	BadPersonsAddresses BadPersonsAddressSlice
	BadPersonsAllNames  BadPersonsAllNameSlice
}

// NewStruct creates a new relationship struct
func (*badPersonR) NewStruct() *badPersonR {
	return &badPersonR{}
}

// badPersonL is where Load methods for each relationship are stored.
type badPersonL struct{}

var (
	badPersonAllColumns            = []string{"id", "full_name", "type", "source", "updated_at", "created_at", "name_vector", "citizenship_country_code"}
	badPersonColumnsWithoutDefault = []string{"full_name", "type", "source", "name_vector"}
	badPersonColumnsWithDefault    = []string{"id", "updated_at", "created_at", "citizenship_country_code"}
	badPersonPrimaryKeyColumns     = []string{"id"}
)

type (
	// BadPersonSlice is an alias for a slice of pointers to BadPerson.
	// This should generally be used opposed to []BadPerson.
	BadPersonSlice []*BadPerson

	badPersonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	badPersonType                 = reflect.TypeOf(&BadPerson{})
	badPersonMapping              = queries.MakeStructMapping(badPersonType)
	badPersonPrimaryKeyMapping, _ = queries.BindMapping(badPersonType, badPersonMapping, badPersonPrimaryKeyColumns)
	badPersonInsertCacheMut       sync.RWMutex
	badPersonInsertCache          = make(map[string]insertCache)
	badPersonUpdateCacheMut       sync.RWMutex
	badPersonUpdateCache          = make(map[string]updateCache)
	badPersonUpsertCacheMut       sync.RWMutex
	badPersonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single badPerson record from the query.
func (q badPersonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BadPerson, error) {
	o := &BadPerson{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bad_persons")
	}

	return o, nil
}

// All returns all BadPerson records from the query.
func (q badPersonQuery) All(ctx context.Context, exec boil.ContextExecutor) (BadPersonSlice, error) {
	var o []*BadPerson

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BadPerson slice")
	}

	return o, nil
}

// Count returns the count of all BadPerson records in the query.
func (q badPersonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bad_persons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q badPersonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bad_persons exists")
	}

	return count > 0, nil
}

// Persons retrieves all the person's Persons with an executor.
func (o *BadPerson) Persons(mods ...qm.QueryMod) personQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"bad_person_to_person\" on \"persons\".\"id\" = \"bad_person_to_person\".\"person_id\""),
		qm.Where("\"bad_person_to_person\".\"bad_person_id\"=?", o.ID),
	)

	query := Persons(queryMods...)
	queries.SetFrom(query.Query, "\"persons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"persons\".*"})
	}

	return query
}

// BadPersonsAddresses retrieves all the bad_persons_address's BadPersonsAddresses with an executor.
func (o *BadPerson) BadPersonsAddresses(mods ...qm.QueryMod) badPersonsAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bad_persons_addresses\".\"bad_person_id\"=?", o.ID),
	)

	query := BadPersonsAddresses(queryMods...)
	queries.SetFrom(query.Query, "\"bad_persons_addresses\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"bad_persons_addresses\".*"})
	}

	return query
}

// BadPersonsAllNames retrieves all the bad_persons_all_name's BadPersonsAllNames with an executor.
func (o *BadPerson) BadPersonsAllNames(mods ...qm.QueryMod) badPersonsAllNameQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bad_persons_all_names\".\"bad_person_id\"=?", o.ID),
	)

	query := BadPersonsAllNames(queryMods...)
	queries.SetFrom(query.Query, "\"bad_persons_all_names\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"bad_persons_all_names\".*"})
	}

	return query
}

// LoadPersons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (badPersonL) LoadPersons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBadPerson interface{}, mods queries.Applicator) error {
	var slice []*BadPerson
	var object *BadPerson

	if singular {
		object = maybeBadPerson.(*BadPerson)
	} else {
		slice = *maybeBadPerson.(*[]*BadPerson)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &badPersonR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &badPersonR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"persons\".*, \"a\".\"bad_person_id\""),
		qm.From("\"persons\""),
		qm.InnerJoin("\"bad_person_to_person\" as \"a\" on \"persons\".\"id\" = \"a\".\"person_id\""),
		qm.WhereIn("\"a\".\"bad_person_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load persons")
	}

	var resultSlice []*Person

	var localJoinCols []string
	for results.Next() {
		one := new(Person)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.FirstName, &one.LastName, &one.CountryCode, &one.UpdatedAt, &one.CreatedAt, &one.NameVector, &one.FullName, &one.Street, &one.Region, &one.ZipCode, &one.City, &one.Address, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for persons")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice persons")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on persons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for persons")
	}

	if singular {
		object.R.Persons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &personR{}
			}
			foreign.R.BadPersons = append(foreign.R.BadPersons, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Persons = append(local.R.Persons, foreign)
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.BadPersons = append(foreign.R.BadPersons, local)
				break
			}
		}
	}

	return nil
}

// LoadBadPersonsAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (badPersonL) LoadBadPersonsAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBadPerson interface{}, mods queries.Applicator) error {
	var slice []*BadPerson
	var object *BadPerson

	if singular {
		object = maybeBadPerson.(*BadPerson)
	} else {
		slice = *maybeBadPerson.(*[]*BadPerson)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &badPersonR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &badPersonR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`bad_persons_addresses`), qm.WhereIn(`bad_persons_addresses.bad_person_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bad_persons_addresses")
	}

	var resultSlice []*BadPersonsAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bad_persons_addresses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bad_persons_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bad_persons_addresses")
	}

	if singular {
		object.R.BadPersonsAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &badPersonsAddressR{}
			}
			foreign.R.BadPerson = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BadPersonID) {
				local.R.BadPersonsAddresses = append(local.R.BadPersonsAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &badPersonsAddressR{}
				}
				foreign.R.BadPerson = local
				break
			}
		}
	}

	return nil
}

// LoadBadPersonsAllNames allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (badPersonL) LoadBadPersonsAllNames(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBadPerson interface{}, mods queries.Applicator) error {
	var slice []*BadPerson
	var object *BadPerson

	if singular {
		object = maybeBadPerson.(*BadPerson)
	} else {
		slice = *maybeBadPerson.(*[]*BadPerson)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &badPersonR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &badPersonR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`bad_persons_all_names`), qm.WhereIn(`bad_persons_all_names.bad_person_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bad_persons_all_names")
	}

	var resultSlice []*BadPersonsAllName
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bad_persons_all_names")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bad_persons_all_names")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bad_persons_all_names")
	}

	if singular {
		object.R.BadPersonsAllNames = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &badPersonsAllNameR{}
			}
			foreign.R.BadPerson = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BadPersonID {
				local.R.BadPersonsAllNames = append(local.R.BadPersonsAllNames, foreign)
				if foreign.R == nil {
					foreign.R = &badPersonsAllNameR{}
				}
				foreign.R.BadPerson = local
				break
			}
		}
	}

	return nil
}

// AddPersons adds the given related objects to the existing relationships
// of the bad_person, optionally inserting them as new records.
// Appends related to o.R.Persons.
// Sets related.R.BadPersons appropriately.
func (o *BadPerson) AddPersons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Person) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"bad_person_to_person\" (\"bad_person_id\", \"person_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &badPersonR{
			Persons: related,
		}
	} else {
		o.R.Persons = append(o.R.Persons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &personR{
				BadPersons: BadPersonSlice{o},
			}
		} else {
			rel.R.BadPersons = append(rel.R.BadPersons, o)
		}
	}
	return nil
}

// SetPersons removes all previously related items of the
// bad_person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BadPersons's Persons accordingly.
// Replaces o.R.Persons with related.
// Sets related.R.BadPersons's Persons accordingly.
func (o *BadPerson) SetPersons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Person) error {
	query := "delete from \"bad_person_to_person\" where \"bad_person_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removePersonsFromBadPersonsSlice(o, related)
	if o.R != nil {
		o.R.Persons = nil
	}
	return o.AddPersons(ctx, exec, insert, related...)
}

// RemovePersons relationships from objects passed in.
// Removes related items from R.Persons (uses pointer comparison, removal does not keep order)
// Sets related.R.BadPersons.
func (o *BadPerson) RemovePersons(ctx context.Context, exec boil.ContextExecutor, related ...*Person) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"bad_person_to_person\" where \"bad_person_id\" = $1 and \"person_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removePersonsFromBadPersonsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Persons {
			if rel != ri {
				continue
			}

			ln := len(o.R.Persons)
			if ln > 1 && i < ln-1 {
				o.R.Persons[i] = o.R.Persons[ln-1]
			}
			o.R.Persons = o.R.Persons[:ln-1]
			break
		}
	}

	return nil
}

func removePersonsFromBadPersonsSlice(o *BadPerson, related []*Person) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.BadPersons {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.BadPersons)
			if ln > 1 && i < ln-1 {
				rel.R.BadPersons[i] = rel.R.BadPersons[ln-1]
			}
			rel.R.BadPersons = rel.R.BadPersons[:ln-1]
			break
		}
	}
}

// AddBadPersonsAddresses adds the given related objects to the existing relationships
// of the bad_person, optionally inserting them as new records.
// Appends related to o.R.BadPersonsAddresses.
// Sets related.R.BadPerson appropriately.
func (o *BadPerson) AddBadPersonsAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BadPersonsAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BadPersonID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bad_persons_addresses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"bad_person_id"}),
				strmangle.WhereClause("\"", "\"", 2, badPersonsAddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BadPersonID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &badPersonR{
			BadPersonsAddresses: related,
		}
	} else {
		o.R.BadPersonsAddresses = append(o.R.BadPersonsAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &badPersonsAddressR{
				BadPerson: o,
			}
		} else {
			rel.R.BadPerson = o
		}
	}
	return nil
}

// SetBadPersonsAddresses removes all previously related items of the
// bad_person replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BadPerson's BadPersonsAddresses accordingly.
// Replaces o.R.BadPersonsAddresses with related.
// Sets related.R.BadPerson's BadPersonsAddresses accordingly.
func (o *BadPerson) SetBadPersonsAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BadPersonsAddress) error {
	query := "update \"bad_persons_addresses\" set \"bad_person_id\" = null where \"bad_person_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BadPersonsAddresses {
			queries.SetScanner(&rel.BadPersonID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BadPerson = nil
		}

		o.R.BadPersonsAddresses = nil
	}
	return o.AddBadPersonsAddresses(ctx, exec, insert, related...)
}

// RemoveBadPersonsAddresses relationships from objects passed in.
// Removes related items from R.BadPersonsAddresses (uses pointer comparison, removal does not keep order)
// Sets related.R.BadPerson.
func (o *BadPerson) RemoveBadPersonsAddresses(ctx context.Context, exec boil.ContextExecutor, related ...*BadPersonsAddress) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BadPersonID, nil)
		if rel.R != nil {
			rel.R.BadPerson = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("bad_person_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BadPersonsAddresses {
			if rel != ri {
				continue
			}

			ln := len(o.R.BadPersonsAddresses)
			if ln > 1 && i < ln-1 {
				o.R.BadPersonsAddresses[i] = o.R.BadPersonsAddresses[ln-1]
			}
			o.R.BadPersonsAddresses = o.R.BadPersonsAddresses[:ln-1]
			break
		}
	}

	return nil
}

// AddBadPersonsAllNames adds the given related objects to the existing relationships
// of the bad_person, optionally inserting them as new records.
// Appends related to o.R.BadPersonsAllNames.
// Sets related.R.BadPerson appropriately.
func (o *BadPerson) AddBadPersonsAllNames(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BadPersonsAllName) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BadPersonID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bad_persons_all_names\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"bad_person_id"}),
				strmangle.WhereClause("\"", "\"", 2, badPersonsAllNamePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BadPersonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &badPersonR{
			BadPersonsAllNames: related,
		}
	} else {
		o.R.BadPersonsAllNames = append(o.R.BadPersonsAllNames, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &badPersonsAllNameR{
				BadPerson: o,
			}
		} else {
			rel.R.BadPerson = o
		}
	}
	return nil
}

// BadPersons retrieves all the records using an executor.
func BadPersons(mods ...qm.QueryMod) badPersonQuery {
	mods = append(mods, qm.From("\"bad_persons\""))
	return badPersonQuery{NewQuery(mods...)}
}

// FindBadPerson retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBadPerson(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*BadPerson, error) {
	badPersonObj := &BadPerson{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bad_persons\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, badPersonObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bad_persons")
	}

	return badPersonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BadPerson) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bad_persons provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(badPersonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	badPersonInsertCacheMut.RLock()
	cache, cached := badPersonInsertCache[key]
	badPersonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			badPersonAllColumns,
			badPersonColumnsWithDefault,
			badPersonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(badPersonType, badPersonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(badPersonType, badPersonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bad_persons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bad_persons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bad_persons")
	}

	if !cached {
		badPersonInsertCacheMut.Lock()
		badPersonInsertCache[key] = cache
		badPersonInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the BadPerson.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BadPerson) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	badPersonUpdateCacheMut.RLock()
	cache, cached := badPersonUpdateCache[key]
	badPersonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			badPersonAllColumns,
			badPersonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bad_persons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bad_persons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, badPersonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(badPersonType, badPersonMapping, append(wl, badPersonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bad_persons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bad_persons")
	}

	if !cached {
		badPersonUpdateCacheMut.Lock()
		badPersonUpdateCache[key] = cache
		badPersonUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q badPersonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bad_persons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bad_persons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BadPersonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badPersonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bad_persons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, badPersonPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in badPerson slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all badPerson")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BadPerson) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bad_persons provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(badPersonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	badPersonUpsertCacheMut.RLock()
	cache, cached := badPersonUpsertCache[key]
	badPersonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			badPersonAllColumns,
			badPersonColumnsWithDefault,
			badPersonColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			badPersonAllColumns,
			badPersonPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bad_persons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(badPersonPrimaryKeyColumns))
			copy(conflict, badPersonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bad_persons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(badPersonType, badPersonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(badPersonType, badPersonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bad_persons")
	}

	if !cached {
		badPersonUpsertCacheMut.Lock()
		badPersonUpsertCache[key] = cache
		badPersonUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single BadPerson record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BadPerson) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BadPerson provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), badPersonPrimaryKeyMapping)
	sql := "DELETE FROM \"bad_persons\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bad_persons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bad_persons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q badPersonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no badPersonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bad_persons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bad_persons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BadPersonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badPersonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bad_persons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, badPersonPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from badPerson slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bad_persons")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BadPerson) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBadPerson(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BadPersonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BadPersonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badPersonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bad_persons\".* FROM \"bad_persons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, badPersonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BadPersonSlice")
	}

	*o = slice

	return nil
}

// BadPersonExists checks if the BadPerson row exists.
func BadPersonExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bad_persons\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bad_persons exists")
	}

	return exists, nil
}

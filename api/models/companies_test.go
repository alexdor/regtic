// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCompanies(t *testing.T) {
	t.Parallel()

	query := Companies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCompaniesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Companies().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompanySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCompaniesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CompanyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Company exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CompanyExists to return true, but got false.")
	}
}

func testCompaniesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	companyFound, err := FindCompany(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if companyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCompaniesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Companies().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCompaniesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Companies().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCompaniesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	companyOne := &Company{}
	companyTwo := &Company{}
	if err = randomize.Struct(seed, companyOne, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err = randomize.Struct(seed, companyTwo, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = companyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = companyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Companies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCompaniesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	companyOne := &Company{}
	companyTwo := &Company{}
	if err = randomize.Struct(seed, companyOne, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}
	if err = randomize.Struct(seed, companyTwo, companyDBTypes, false, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = companyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = companyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testCompaniesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompaniesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(companyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCompanyToManyBadCompanies(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c BadCompany

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, badCompanyDBTypes, false, badCompanyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, badCompanyDBTypes, false, badCompanyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"bad_company_to_company\" (\"company_id\", \"bad_company_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"bad_company_to_company\" (\"company_id\", \"bad_company_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.BadCompanies().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompanySlice{&a}
	if err = a.L.LoadBadCompanies(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BadCompanies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BadCompanies = nil
	if err = a.L.LoadBadCompanies(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BadCompanies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCompanyToManyDaughterCompanyCompanyToCompanies(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c CompanyToCompany

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, companyToCompanyDBTypes, false, companyToCompanyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, companyToCompanyDBTypes, false, companyToCompanyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DaughterCompanyID = a.ID
	c.DaughterCompanyID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DaughterCompanyCompanyToCompanies().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DaughterCompanyID == b.DaughterCompanyID {
			bFound = true
		}
		if v.DaughterCompanyID == c.DaughterCompanyID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompanySlice{&a}
	if err = a.L.LoadDaughterCompanyCompanyToCompanies(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DaughterCompanyCompanyToCompanies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DaughterCompanyCompanyToCompanies = nil
	if err = a.L.LoadDaughterCompanyCompanyToCompanies(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DaughterCompanyCompanyToCompanies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCompanyToManyMotherCompanyCompanyToCompanies(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c CompanyToCompany

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, companyToCompanyDBTypes, false, companyToCompanyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, companyToCompanyDBTypes, false, companyToCompanyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.MotherCompanyID = a.ID
	c.MotherCompanyID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MotherCompanyCompanyToCompanies().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.MotherCompanyID == b.MotherCompanyID {
			bFound = true
		}
		if v.MotherCompanyID == c.MotherCompanyID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompanySlice{&a}
	if err = a.L.LoadMotherCompanyCompanyToCompanies(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MotherCompanyCompanyToCompanies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MotherCompanyCompanyToCompanies = nil
	if err = a.L.LoadMotherCompanyCompanyToCompanies(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MotherCompanyCompanyToCompanies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCompanyToManyCompanyToPeople(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c CompanyToPerson

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, companyToPersonDBTypes, false, companyToPersonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, companyToPersonDBTypes, false, companyToPersonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CompanyID = a.ID
	c.CompanyID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CompanyToPeople().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CompanyID == b.CompanyID {
			bFound = true
		}
		if v.CompanyID == c.CompanyID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CompanySlice{&a}
	if err = a.L.LoadCompanyToPeople(ctx, tx, false, (*[]*Company)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CompanyToPeople); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CompanyToPeople = nil
	if err = a.L.LoadCompanyToPeople(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CompanyToPeople); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCompanyToManyAddOpBadCompanies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c, d, e BadCompany

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BadCompany{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, badCompanyDBTypes, false, strmangle.SetComplement(badCompanyPrimaryKeyColumns, badCompanyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*BadCompany{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBadCompanies(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Companies[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Companies[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.BadCompanies[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BadCompanies[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BadCompanies().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCompanyToManySetOpBadCompanies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c, d, e BadCompany

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BadCompany{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, badCompanyDBTypes, false, strmangle.SetComplement(badCompanyPrimaryKeyColumns, badCompanyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetBadCompanies(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.BadCompanies().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetBadCompanies(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.BadCompanies().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Companies) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Companies) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Companies[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Companies[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.BadCompanies[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.BadCompanies[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCompanyToManyRemoveOpBadCompanies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c, d, e BadCompany

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BadCompany{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, badCompanyDBTypes, false, strmangle.SetComplement(badCompanyPrimaryKeyColumns, badCompanyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddBadCompanies(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.BadCompanies().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveBadCompanies(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.BadCompanies().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Companies) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Companies) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Companies[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Companies[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.BadCompanies) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.BadCompanies[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.BadCompanies[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCompanyToManyAddOpDaughterCompanyCompanyToCompanies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c, d, e CompanyToCompany

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CompanyToCompany{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, companyToCompanyDBTypes, false, strmangle.SetComplement(companyToCompanyPrimaryKeyColumns, companyToCompanyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CompanyToCompany{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDaughterCompanyCompanyToCompanies(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DaughterCompanyID {
			t.Error("foreign key was wrong value", a.ID, first.DaughterCompanyID)
		}
		if a.ID != second.DaughterCompanyID {
			t.Error("foreign key was wrong value", a.ID, second.DaughterCompanyID)
		}

		if first.R.DaughterCompany != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DaughterCompany != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DaughterCompanyCompanyToCompanies[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DaughterCompanyCompanyToCompanies[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DaughterCompanyCompanyToCompanies().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCompanyToManyAddOpMotherCompanyCompanyToCompanies(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c, d, e CompanyToCompany

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CompanyToCompany{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, companyToCompanyDBTypes, false, strmangle.SetComplement(companyToCompanyPrimaryKeyColumns, companyToCompanyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CompanyToCompany{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMotherCompanyCompanyToCompanies(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.MotherCompanyID {
			t.Error("foreign key was wrong value", a.ID, first.MotherCompanyID)
		}
		if a.ID != second.MotherCompanyID {
			t.Error("foreign key was wrong value", a.ID, second.MotherCompanyID)
		}

		if first.R.MotherCompany != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MotherCompany != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MotherCompanyCompanyToCompanies[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MotherCompanyCompanyToCompanies[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MotherCompanyCompanyToCompanies().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCompanyToManyAddOpCompanyToPeople(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Company
	var b, c, d, e CompanyToPerson

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, companyDBTypes, false, strmangle.SetComplement(companyPrimaryKeyColumns, companyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CompanyToPerson{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, companyToPersonDBTypes, false, strmangle.SetComplement(companyToPersonPrimaryKeyColumns, companyToPersonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CompanyToPerson{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCompanyToPeople(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CompanyID {
			t.Error("foreign key was wrong value", a.ID, first.CompanyID)
		}
		if a.ID != second.CompanyID {
			t.Error("foreign key was wrong value", a.ID, second.CompanyID)
		}

		if first.R.Company != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Company != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CompanyToPeople[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CompanyToPeople[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CompanyToPeople().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCompaniesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompaniesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CompanySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCompaniesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Companies().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	companyDBTypes = map[string]string{`ID`: `uuid`, `Address`: `text`, `Vat`: `text`, `StartingDate`: `text`, `CountryCode`: `character varying`, `UpdatedAt`: `timestamp without time zone`, `CreatedAt`: `timestamp without time zone`, `Name`: `text`, `Status`: `enum.company_status('active','liquidation','dissolved','closed')`, `StatusNotes`: `text`, `NameVector`: `tsvector`, `Type`: `text`}
	_              = bytes.MinRead
)

func testCompaniesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(companyAllColumns) == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, companyDBTypes, true, companyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCompaniesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(companyAllColumns) == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Company{}
	if err = randomize.Struct(seed, o, companyDBTypes, true, companyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, companyDBTypes, true, companyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(companyAllColumns, companyPrimaryKeyColumns) {
		fields = companyAllColumns
	} else {
		fields = strmangle.SetComplement(
			companyAllColumns,
			companyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CompanySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCompaniesUpsert(t *testing.T) {
	t.Parallel()

	if len(companyAllColumns) == len(companyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Company{}
	if err = randomize.Struct(seed, &o, companyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Company: %s", err)
	}

	count, err := Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, companyDBTypes, false, companyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Company struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Company: %s", err)
	}

	count, err = Companies().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

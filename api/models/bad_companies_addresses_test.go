// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBadCompaniesAddresses(t *testing.T) {
	t.Parallel()

	query := BadCompaniesAddresses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBadCompaniesAddressesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BadCompaniesAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBadCompaniesAddressesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BadCompaniesAddresses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BadCompaniesAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBadCompaniesAddressesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BadCompaniesAddressSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BadCompaniesAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBadCompaniesAddressesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BadCompaniesAddressExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BadCompaniesAddress exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BadCompaniesAddressExists to return true, but got false.")
	}
}

func testBadCompaniesAddressesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	badCompaniesAddressFound, err := FindBadCompaniesAddress(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if badCompaniesAddressFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBadCompaniesAddressesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BadCompaniesAddresses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBadCompaniesAddressesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BadCompaniesAddresses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBadCompaniesAddressesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	badCompaniesAddressOne := &BadCompaniesAddress{}
	badCompaniesAddressTwo := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, badCompaniesAddressOne, badCompaniesAddressDBTypes, false, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}
	if err = randomize.Struct(seed, badCompaniesAddressTwo, badCompaniesAddressDBTypes, false, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = badCompaniesAddressOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = badCompaniesAddressTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BadCompaniesAddresses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBadCompaniesAddressesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	badCompaniesAddressOne := &BadCompaniesAddress{}
	badCompaniesAddressTwo := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, badCompaniesAddressOne, badCompaniesAddressDBTypes, false, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}
	if err = randomize.Struct(seed, badCompaniesAddressTwo, badCompaniesAddressDBTypes, false, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = badCompaniesAddressOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = badCompaniesAddressTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BadCompaniesAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testBadCompaniesAddressesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BadCompaniesAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBadCompaniesAddressesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(badCompaniesAddressColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BadCompaniesAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBadCompaniesAddressToOneBadCompanyUsingBadCompany(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BadCompaniesAddress
	var foreign BadCompany

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, badCompanyDBTypes, false, badCompanyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompany struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.BadCompanyID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BadCompany().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BadCompaniesAddressSlice{&local}
	if err = local.L.LoadBadCompany(ctx, tx, false, (*[]*BadCompaniesAddress)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BadCompany == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BadCompany = nil
	if err = local.L.LoadBadCompany(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BadCompany == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBadCompaniesAddressToOneSetOpBadCompanyUsingBadCompany(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BadCompaniesAddress
	var b, c BadCompany

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, badCompaniesAddressDBTypes, false, strmangle.SetComplement(badCompaniesAddressPrimaryKeyColumns, badCompaniesAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, badCompanyDBTypes, false, strmangle.SetComplement(badCompanyPrimaryKeyColumns, badCompanyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, badCompanyDBTypes, false, strmangle.SetComplement(badCompanyPrimaryKeyColumns, badCompanyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*BadCompany{&b, &c} {
		err = a.SetBadCompany(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BadCompany != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BadCompaniesAddresses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.BadCompanyID, x.ID) {
			t.Error("foreign key was wrong value", a.BadCompanyID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BadCompanyID))
		reflect.Indirect(reflect.ValueOf(&a.BadCompanyID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.BadCompanyID, x.ID) {
			t.Error("foreign key was wrong value", a.BadCompanyID, x.ID)
		}
	}
}

func testBadCompaniesAddressToOneRemoveOpBadCompanyUsingBadCompany(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BadCompaniesAddress
	var b BadCompany

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, badCompaniesAddressDBTypes, false, strmangle.SetComplement(badCompaniesAddressPrimaryKeyColumns, badCompaniesAddressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, badCompanyDBTypes, false, strmangle.SetComplement(badCompanyPrimaryKeyColumns, badCompanyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBadCompany(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBadCompany(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.BadCompany().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.BadCompany != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.BadCompanyID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.BadCompaniesAddresses) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBadCompaniesAddressesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBadCompaniesAddressesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BadCompaniesAddressSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBadCompaniesAddressesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BadCompaniesAddresses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	badCompaniesAddressDBTypes = map[string]string{`ID`: `uuid`, `UpdatedAt`: `timestamp without time zone`, `CreatedAt`: `timestamp without time zone`, `BadCompanyID`: `uuid`, `CountryCode`: `character varying`, `Street`: `text`, `City`: `text`, `ZipCode`: `text`, `Region`: `text`, `Place`: `text`, `PoBox`: `text`}
	_                          = bytes.MinRead
)

func testBadCompaniesAddressesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(badCompaniesAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(badCompaniesAddressAllColumns) == len(badCompaniesAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BadCompaniesAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBadCompaniesAddressesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(badCompaniesAddressAllColumns) == len(badCompaniesAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BadCompaniesAddress{}
	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BadCompaniesAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, badCompaniesAddressDBTypes, true, badCompaniesAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(badCompaniesAddressAllColumns, badCompaniesAddressPrimaryKeyColumns) {
		fields = badCompaniesAddressAllColumns
	} else {
		fields = strmangle.SetComplement(
			badCompaniesAddressAllColumns,
			badCompaniesAddressPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BadCompaniesAddressSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBadCompaniesAddressesUpsert(t *testing.T) {
	t.Parallel()

	if len(badCompaniesAddressAllColumns) == len(badCompaniesAddressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BadCompaniesAddress{}
	if err = randomize.Struct(seed, &o, badCompaniesAddressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BadCompaniesAddress: %s", err)
	}

	count, err := BadCompaniesAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, badCompaniesAddressDBTypes, false, badCompaniesAddressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BadCompaniesAddress struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BadCompaniesAddress: %s", err)
	}

	count, err = BadCompaniesAddresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BadPersonsAllName is an object representing the database table.
type BadPersonsAllName struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	FullName    null.String `boil:"full_name" json:"fullName,omitempty" toml:"fullName" yaml:"fullName,omitempty"`
	BadPersonID string      `boil:"bad_person_id" json:"badPersonID" toml:"badPersonID" yaml:"badPersonID"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt   time.Time   `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	NameVector  null.String `boil:"name_vector" json:"nameVector,omitempty" toml:"nameVector" yaml:"nameVector,omitempty"`

	R *badPersonsAllNameR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L badPersonsAllNameL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BadPersonsAllNameColumns = struct {
	ID          string
	FullName    string
	BadPersonID string
	UpdatedAt   string
	CreatedAt   string
	NameVector  string
}{
	ID:          "id",
	FullName:    "full_name",
	BadPersonID: "bad_person_id",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
	NameVector:  "name_vector",
}

// Generated where

var BadPersonsAllNameWhere = struct {
	ID          whereHelperstring
	FullName    whereHelpernull_String
	BadPersonID whereHelperstring
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
	NameVector  whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"bad_persons_all_names\".\"id\""},
	FullName:    whereHelpernull_String{field: "\"bad_persons_all_names\".\"full_name\""},
	BadPersonID: whereHelperstring{field: "\"bad_persons_all_names\".\"bad_person_id\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"bad_persons_all_names\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"bad_persons_all_names\".\"created_at\""},
	NameVector:  whereHelpernull_String{field: "\"bad_persons_all_names\".\"name_vector\""},
}

// BadPersonsAllNameRels is where relationship names are stored.
var BadPersonsAllNameRels = struct {
	BadPerson string
}{
	BadPerson: "BadPerson",
}

// badPersonsAllNameR is where relationships are stored.
type badPersonsAllNameR struct {
	BadPerson *BadPerson
}

// NewStruct creates a new relationship struct
func (*badPersonsAllNameR) NewStruct() *badPersonsAllNameR {
	return &badPersonsAllNameR{}
}

// badPersonsAllNameL is where Load methods for each relationship are stored.
type badPersonsAllNameL struct{}

var (
	badPersonsAllNameAllColumns            = []string{"id", "full_name", "bad_person_id", "updated_at", "created_at", "name_vector"}
	badPersonsAllNameColumnsWithoutDefault = []string{"full_name", "bad_person_id", "name_vector"}
	badPersonsAllNameColumnsWithDefault    = []string{"id", "updated_at", "created_at"}
	badPersonsAllNamePrimaryKeyColumns     = []string{"id"}
)

type (
	// BadPersonsAllNameSlice is an alias for a slice of pointers to BadPersonsAllName.
	// This should generally be used opposed to []BadPersonsAllName.
	BadPersonsAllNameSlice []*BadPersonsAllName

	badPersonsAllNameQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	badPersonsAllNameType                 = reflect.TypeOf(&BadPersonsAllName{})
	badPersonsAllNameMapping              = queries.MakeStructMapping(badPersonsAllNameType)
	badPersonsAllNamePrimaryKeyMapping, _ = queries.BindMapping(badPersonsAllNameType, badPersonsAllNameMapping, badPersonsAllNamePrimaryKeyColumns)
	badPersonsAllNameInsertCacheMut       sync.RWMutex
	badPersonsAllNameInsertCache          = make(map[string]insertCache)
	badPersonsAllNameUpdateCacheMut       sync.RWMutex
	badPersonsAllNameUpdateCache          = make(map[string]updateCache)
	badPersonsAllNameUpsertCacheMut       sync.RWMutex
	badPersonsAllNameUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single badPersonsAllName record from the query.
func (q badPersonsAllNameQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BadPersonsAllName, error) {
	o := &BadPersonsAllName{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bad_persons_all_names")
	}

	return o, nil
}

// All returns all BadPersonsAllName records from the query.
func (q badPersonsAllNameQuery) All(ctx context.Context, exec boil.ContextExecutor) (BadPersonsAllNameSlice, error) {
	var o []*BadPersonsAllName

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BadPersonsAllName slice")
	}

	return o, nil
}

// Count returns the count of all BadPersonsAllName records in the query.
func (q badPersonsAllNameQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bad_persons_all_names rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q badPersonsAllNameQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bad_persons_all_names exists")
	}

	return count > 0, nil
}

// BadPerson pointed to by the foreign key.
func (o *BadPersonsAllName) BadPerson(mods ...qm.QueryMod) badPersonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BadPersonID),
	}

	queryMods = append(queryMods, mods...)

	query := BadPersons(queryMods...)
	queries.SetFrom(query.Query, "\"bad_persons\"")

	return query
}

// LoadBadPerson allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (badPersonsAllNameL) LoadBadPerson(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBadPersonsAllName interface{}, mods queries.Applicator) error {
	var slice []*BadPersonsAllName
	var object *BadPersonsAllName

	if singular {
		object = maybeBadPersonsAllName.(*BadPersonsAllName)
	} else {
		slice = *maybeBadPersonsAllName.(*[]*BadPersonsAllName)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &badPersonsAllNameR{}
		}
		args = append(args, object.BadPersonID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &badPersonsAllNameR{}
			}

			for _, a := range args {
				if a == obj.BadPersonID {
					continue Outer
				}
			}

			args = append(args, obj.BadPersonID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`bad_persons`), qm.WhereIn(`bad_persons.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BadPerson")
	}

	var resultSlice []*BadPerson
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BadPerson")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for bad_persons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bad_persons")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BadPerson = foreign
		if foreign.R == nil {
			foreign.R = &badPersonR{}
		}
		foreign.R.BadPersonsAllNames = append(foreign.R.BadPersonsAllNames, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BadPersonID == foreign.ID {
				local.R.BadPerson = foreign
				if foreign.R == nil {
					foreign.R = &badPersonR{}
				}
				foreign.R.BadPersonsAllNames = append(foreign.R.BadPersonsAllNames, local)
				break
			}
		}
	}

	return nil
}

// SetBadPerson of the badPersonsAllName to the related item.
// Sets o.R.BadPerson to related.
// Adds o to related.R.BadPersonsAllNames.
func (o *BadPersonsAllName) SetBadPerson(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BadPerson) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bad_persons_all_names\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"bad_person_id"}),
		strmangle.WhereClause("\"", "\"", 2, badPersonsAllNamePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BadPersonID = related.ID
	if o.R == nil {
		o.R = &badPersonsAllNameR{
			BadPerson: related,
		}
	} else {
		o.R.BadPerson = related
	}

	if related.R == nil {
		related.R = &badPersonR{
			BadPersonsAllNames: BadPersonsAllNameSlice{o},
		}
	} else {
		related.R.BadPersonsAllNames = append(related.R.BadPersonsAllNames, o)
	}

	return nil
}

// BadPersonsAllNames retrieves all the records using an executor.
func BadPersonsAllNames(mods ...qm.QueryMod) badPersonsAllNameQuery {
	mods = append(mods, qm.From("\"bad_persons_all_names\""))
	return badPersonsAllNameQuery{NewQuery(mods...)}
}

// FindBadPersonsAllName retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBadPersonsAllName(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*BadPersonsAllName, error) {
	badPersonsAllNameObj := &BadPersonsAllName{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bad_persons_all_names\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, badPersonsAllNameObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bad_persons_all_names")
	}

	return badPersonsAllNameObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BadPersonsAllName) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bad_persons_all_names provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(badPersonsAllNameColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	badPersonsAllNameInsertCacheMut.RLock()
	cache, cached := badPersonsAllNameInsertCache[key]
	badPersonsAllNameInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			badPersonsAllNameAllColumns,
			badPersonsAllNameColumnsWithDefault,
			badPersonsAllNameColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(badPersonsAllNameType, badPersonsAllNameMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(badPersonsAllNameType, badPersonsAllNameMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bad_persons_all_names\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bad_persons_all_names\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bad_persons_all_names")
	}

	if !cached {
		badPersonsAllNameInsertCacheMut.Lock()
		badPersonsAllNameInsertCache[key] = cache
		badPersonsAllNameInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the BadPersonsAllName.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BadPersonsAllName) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	badPersonsAllNameUpdateCacheMut.RLock()
	cache, cached := badPersonsAllNameUpdateCache[key]
	badPersonsAllNameUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			badPersonsAllNameAllColumns,
			badPersonsAllNamePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bad_persons_all_names, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bad_persons_all_names\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, badPersonsAllNamePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(badPersonsAllNameType, badPersonsAllNameMapping, append(wl, badPersonsAllNamePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bad_persons_all_names row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bad_persons_all_names")
	}

	if !cached {
		badPersonsAllNameUpdateCacheMut.Lock()
		badPersonsAllNameUpdateCache[key] = cache
		badPersonsAllNameUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q badPersonsAllNameQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bad_persons_all_names")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bad_persons_all_names")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BadPersonsAllNameSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badPersonsAllNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bad_persons_all_names\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, badPersonsAllNamePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in badPersonsAllName slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all badPersonsAllName")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BadPersonsAllName) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bad_persons_all_names provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(badPersonsAllNameColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	badPersonsAllNameUpsertCacheMut.RLock()
	cache, cached := badPersonsAllNameUpsertCache[key]
	badPersonsAllNameUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			badPersonsAllNameAllColumns,
			badPersonsAllNameColumnsWithDefault,
			badPersonsAllNameColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			badPersonsAllNameAllColumns,
			badPersonsAllNamePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bad_persons_all_names, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(badPersonsAllNamePrimaryKeyColumns))
			copy(conflict, badPersonsAllNamePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bad_persons_all_names\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(badPersonsAllNameType, badPersonsAllNameMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(badPersonsAllNameType, badPersonsAllNameMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bad_persons_all_names")
	}

	if !cached {
		badPersonsAllNameUpsertCacheMut.Lock()
		badPersonsAllNameUpsertCache[key] = cache
		badPersonsAllNameUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single BadPersonsAllName record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BadPersonsAllName) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BadPersonsAllName provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), badPersonsAllNamePrimaryKeyMapping)
	sql := "DELETE FROM \"bad_persons_all_names\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bad_persons_all_names")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bad_persons_all_names")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q badPersonsAllNameQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no badPersonsAllNameQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bad_persons_all_names")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bad_persons_all_names")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BadPersonsAllNameSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badPersonsAllNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bad_persons_all_names\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, badPersonsAllNamePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from badPersonsAllName slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bad_persons_all_names")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BadPersonsAllName) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBadPersonsAllName(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BadPersonsAllNameSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BadPersonsAllNameSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badPersonsAllNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bad_persons_all_names\".* FROM \"bad_persons_all_names\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, badPersonsAllNamePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BadPersonsAllNameSlice")
	}

	*o = slice

	return nil
}

// BadPersonsAllNameExists checks if the BadPersonsAllName row exists.
func BadPersonsAllNameExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bad_persons_all_names\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bad_persons_all_names exists")
	}

	return exists, nil
}

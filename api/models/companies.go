// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Company is an object representing the database table.
type Company struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Vat          string      `boil:"vat" json:"vat" toml:"vat" yaml:"vat"`
	StartingDate null.String `boil:"starting_date" json:"startingDate,omitempty" toml:"startingDate" yaml:"startingDate,omitempty"`
	CountryCode  string      `boil:"country_code" json:"countryCode" toml:"countryCode" yaml:"countryCode"`
	UpdatedAt    time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt    time.Time   `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	Name         null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Status       null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	StatusNotes  null.String `boil:"status_notes" json:"statusNotes,omitempty" toml:"statusNotes" yaml:"statusNotes,omitempty"`
	NameVector   null.String `boil:"name_vector" json:"nameVector,omitempty" toml:"nameVector" yaml:"nameVector,omitempty"`
	Type         null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	Street       null.String `boil:"street" json:"street,omitempty" toml:"street" yaml:"street,omitempty"`
	Region       null.String `boil:"region" json:"region,omitempty" toml:"region" yaml:"region,omitempty"`
	ZipCode      null.String `boil:"zip_code" json:"zipCode,omitempty" toml:"zipCode" yaml:"zipCode,omitempty"`
	City         null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	Address      null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`

	R *companyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L companyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompanyColumns = struct {
	ID           string
	Vat          string
	StartingDate string
	CountryCode  string
	UpdatedAt    string
	CreatedAt    string
	Name         string
	Status       string
	StatusNotes  string
	NameVector   string
	Type         string
	Street       string
	Region       string
	ZipCode      string
	City         string
	Address      string
}{
	ID:           "id",
	Vat:          "vat",
	StartingDate: "starting_date",
	CountryCode:  "country_code",
	UpdatedAt:    "updated_at",
	CreatedAt:    "created_at",
	Name:         "name",
	Status:       "status",
	StatusNotes:  "status_notes",
	NameVector:   "name_vector",
	Type:         "type",
	Street:       "street",
	Region:       "region",
	ZipCode:      "zip_code",
	City:         "city",
	Address:      "address",
}

// Generated where

var CompanyWhere = struct {
	ID           whereHelperstring
	Vat          whereHelperstring
	StartingDate whereHelpernull_String
	CountryCode  whereHelperstring
	UpdatedAt    whereHelpertime_Time
	CreatedAt    whereHelpertime_Time
	Name         whereHelpernull_String
	Status       whereHelpernull_String
	StatusNotes  whereHelpernull_String
	NameVector   whereHelpernull_String
	Type         whereHelpernull_String
	Street       whereHelpernull_String
	Region       whereHelpernull_String
	ZipCode      whereHelpernull_String
	City         whereHelpernull_String
	Address      whereHelpernull_String
}{
	ID:           whereHelperstring{field: "\"companies\".\"id\""},
	Vat:          whereHelperstring{field: "\"companies\".\"vat\""},
	StartingDate: whereHelpernull_String{field: "\"companies\".\"starting_date\""},
	CountryCode:  whereHelperstring{field: "\"companies\".\"country_code\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"companies\".\"updated_at\""},
	CreatedAt:    whereHelpertime_Time{field: "\"companies\".\"created_at\""},
	Name:         whereHelpernull_String{field: "\"companies\".\"name\""},
	Status:       whereHelpernull_String{field: "\"companies\".\"status\""},
	StatusNotes:  whereHelpernull_String{field: "\"companies\".\"status_notes\""},
	NameVector:   whereHelpernull_String{field: "\"companies\".\"name_vector\""},
	Type:         whereHelpernull_String{field: "\"companies\".\"type\""},
	Street:       whereHelpernull_String{field: "\"companies\".\"street\""},
	Region:       whereHelpernull_String{field: "\"companies\".\"region\""},
	ZipCode:      whereHelpernull_String{field: "\"companies\".\"zip_code\""},
	City:         whereHelpernull_String{field: "\"companies\".\"city\""},
	Address:      whereHelpernull_String{field: "\"companies\".\"address\""},
}

// CompanyRels is where relationship names are stored.
var CompanyRels = struct {
	BadCompanies                      string
	DaughterCompanyCompanyToCompanies string
	MotherCompanyCompanyToCompanies   string
	CompanyToPeople                   string
}{
	BadCompanies:                      "BadCompanies",
	DaughterCompanyCompanyToCompanies: "DaughterCompanyCompanyToCompanies",
	MotherCompanyCompanyToCompanies:   "MotherCompanyCompanyToCompanies",
	CompanyToPeople:                   "CompanyToPeople",
}

// companyR is where relationships are stored.
type companyR struct {
	BadCompanies                      BadCompanySlice
	DaughterCompanyCompanyToCompanies CompanyToCompanySlice
	MotherCompanyCompanyToCompanies   CompanyToCompanySlice
	CompanyToPeople                   CompanyToPersonSlice
}

// NewStruct creates a new relationship struct
func (*companyR) NewStruct() *companyR {
	return &companyR{}
}

// companyL is where Load methods for each relationship are stored.
type companyL struct{}

var (
	companyAllColumns            = []string{"id", "vat", "starting_date", "country_code", "updated_at", "created_at", "name", "status", "status_notes", "name_vector", "type", "street", "region", "zip_code", "city", "address"}
	companyColumnsWithoutDefault = []string{"vat", "starting_date", "name", "status", "status_notes", "name_vector", "type", "street", "region", "zip_code", "city", "address"}
	companyColumnsWithDefault    = []string{"id", "country_code", "updated_at", "created_at"}
	companyPrimaryKeyColumns     = []string{"id"}
)

type (
	// CompanySlice is an alias for a slice of pointers to Company.
	// This should generally be used opposed to []Company.
	CompanySlice []*Company

	companyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	companyType                 = reflect.TypeOf(&Company{})
	companyMapping              = queries.MakeStructMapping(companyType)
	companyPrimaryKeyMapping, _ = queries.BindMapping(companyType, companyMapping, companyPrimaryKeyColumns)
	companyInsertCacheMut       sync.RWMutex
	companyInsertCache          = make(map[string]insertCache)
	companyUpdateCacheMut       sync.RWMutex
	companyUpdateCache          = make(map[string]updateCache)
	companyUpsertCacheMut       sync.RWMutex
	companyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single company record from the query.
func (q companyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Company, error) {
	o := &Company{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for companies")
	}

	return o, nil
}

// All returns all Company records from the query.
func (q companyQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompanySlice, error) {
	var o []*Company

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Company slice")
	}

	return o, nil
}

// Count returns the count of all Company records in the query.
func (q companyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count companies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q companyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if companies exists")
	}

	return count > 0, nil
}

// BadCompanies retrieves all the bad_company's BadCompanies with an executor.
func (o *Company) BadCompanies(mods ...qm.QueryMod) badCompanyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"bad_company_to_company\" on \"bad_companies\".\"id\" = \"bad_company_to_company\".\"bad_company_id\""),
		qm.Where("\"bad_company_to_company\".\"company_id\"=?", o.ID),
	)

	query := BadCompanies(queryMods...)
	queries.SetFrom(query.Query, "\"bad_companies\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"bad_companies\".*"})
	}

	return query
}

// DaughterCompanyCompanyToCompanies retrieves all the company_to_company's CompanyToCompanies with an executor via daughter_company_id column.
func (o *Company) DaughterCompanyCompanyToCompanies(mods ...qm.QueryMod) companyToCompanyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"company_to_company\".\"daughter_company_id\"=?", o.ID),
	)

	query := CompanyToCompanies(queryMods...)
	queries.SetFrom(query.Query, "\"company_to_company\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"company_to_company\".*"})
	}

	return query
}

// MotherCompanyCompanyToCompanies retrieves all the company_to_company's CompanyToCompanies with an executor via mother_company_id column.
func (o *Company) MotherCompanyCompanyToCompanies(mods ...qm.QueryMod) companyToCompanyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"company_to_company\".\"mother_company_id\"=?", o.ID),
	)

	query := CompanyToCompanies(queryMods...)
	queries.SetFrom(query.Query, "\"company_to_company\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"company_to_company\".*"})
	}

	return query
}

// CompanyToPeople retrieves all the company_to_person's CompanyToPeople with an executor.
func (o *Company) CompanyToPeople(mods ...qm.QueryMod) companyToPersonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"company_to_person\".\"company_id\"=?", o.ID),
	)

	query := CompanyToPeople(queryMods...)
	queries.SetFrom(query.Query, "\"company_to_person\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"company_to_person\".*"})
	}

	return query
}

// LoadBadCompanies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadBadCompanies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		object = maybeCompany.(*Company)
	} else {
		slice = *maybeCompany.(*[]*Company)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"bad_companies\".*, \"a\".\"company_id\""),
		qm.From("\"bad_companies\""),
		qm.InnerJoin("\"bad_company_to_company\" as \"a\" on \"bad_companies\".\"id\" = \"a\".\"bad_company_id\""),
		qm.WhereIn("\"a\".\"company_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bad_companies")
	}

	var resultSlice []*BadCompany

	var localJoinCols []string
	for results.Next() {
		one := new(BadCompany)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.UpdatedAt, &one.CreatedAt, &one.Name, &one.NameVector, &one.Address, &one.Source, &one.CitizenshipRegion, &one.Type, &one.CitizenshipCountryCode, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for bad_companies")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice bad_companies")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bad_companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bad_companies")
	}

	if singular {
		object.R.BadCompanies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &badCompanyR{}
			}
			foreign.R.Companies = append(foreign.R.Companies, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.BadCompanies = append(local.R.BadCompanies, foreign)
				if foreign.R == nil {
					foreign.R = &badCompanyR{}
				}
				foreign.R.Companies = append(foreign.R.Companies, local)
				break
			}
		}
	}

	return nil
}

// LoadDaughterCompanyCompanyToCompanies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadDaughterCompanyCompanyToCompanies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		object = maybeCompany.(*Company)
	} else {
		slice = *maybeCompany.(*[]*Company)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`company_to_company`), qm.WhereIn(`company_to_company.daughter_company_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load company_to_company")
	}

	var resultSlice []*CompanyToCompany
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice company_to_company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on company_to_company")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for company_to_company")
	}

	if singular {
		object.R.DaughterCompanyCompanyToCompanies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &companyToCompanyR{}
			}
			foreign.R.DaughterCompany = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DaughterCompanyID {
				local.R.DaughterCompanyCompanyToCompanies = append(local.R.DaughterCompanyCompanyToCompanies, foreign)
				if foreign.R == nil {
					foreign.R = &companyToCompanyR{}
				}
				foreign.R.DaughterCompany = local
				break
			}
		}
	}

	return nil
}

// LoadMotherCompanyCompanyToCompanies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadMotherCompanyCompanyToCompanies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		object = maybeCompany.(*Company)
	} else {
		slice = *maybeCompany.(*[]*Company)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`company_to_company`), qm.WhereIn(`company_to_company.mother_company_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load company_to_company")
	}

	var resultSlice []*CompanyToCompany
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice company_to_company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on company_to_company")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for company_to_company")
	}

	if singular {
		object.R.MotherCompanyCompanyToCompanies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &companyToCompanyR{}
			}
			foreign.R.MotherCompany = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MotherCompanyID {
				local.R.MotherCompanyCompanyToCompanies = append(local.R.MotherCompanyCompanyToCompanies, foreign)
				if foreign.R == nil {
					foreign.R = &companyToCompanyR{}
				}
				foreign.R.MotherCompany = local
				break
			}
		}
	}

	return nil
}

// LoadCompanyToPeople allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (companyL) LoadCompanyToPeople(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompany interface{}, mods queries.Applicator) error {
	var slice []*Company
	var object *Company

	if singular {
		object = maybeCompany.(*Company)
	} else {
		slice = *maybeCompany.(*[]*Company)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`company_to_person`), qm.WhereIn(`company_to_person.company_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load company_to_person")
	}

	var resultSlice []*CompanyToPerson
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice company_to_person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on company_to_person")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for company_to_person")
	}

	if singular {
		object.R.CompanyToPeople = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &companyToPersonR{}
			}
			foreign.R.Company = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CompanyID {
				local.R.CompanyToPeople = append(local.R.CompanyToPeople, foreign)
				if foreign.R == nil {
					foreign.R = &companyToPersonR{}
				}
				foreign.R.Company = local
				break
			}
		}
	}

	return nil
}

// AddBadCompanies adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.BadCompanies.
// Sets related.R.Companies appropriately.
func (o *Company) AddBadCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BadCompany) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"bad_company_to_company\" (\"company_id\", \"bad_company_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &companyR{
			BadCompanies: related,
		}
	} else {
		o.R.BadCompanies = append(o.R.BadCompanies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &badCompanyR{
				Companies: CompanySlice{o},
			}
		} else {
			rel.R.Companies = append(rel.R.Companies, o)
		}
	}
	return nil
}

// SetBadCompanies removes all previously related items of the
// company replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Companies's BadCompanies accordingly.
// Replaces o.R.BadCompanies with related.
// Sets related.R.Companies's BadCompanies accordingly.
func (o *Company) SetBadCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BadCompany) error {
	query := "delete from \"bad_company_to_company\" where \"company_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeBadCompaniesFromCompaniesSlice(o, related)
	if o.R != nil {
		o.R.BadCompanies = nil
	}
	return o.AddBadCompanies(ctx, exec, insert, related...)
}

// RemoveBadCompanies relationships from objects passed in.
// Removes related items from R.BadCompanies (uses pointer comparison, removal does not keep order)
// Sets related.R.Companies.
func (o *Company) RemoveBadCompanies(ctx context.Context, exec boil.ContextExecutor, related ...*BadCompany) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"bad_company_to_company\" where \"company_id\" = $1 and \"bad_company_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeBadCompaniesFromCompaniesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BadCompanies {
			if rel != ri {
				continue
			}

			ln := len(o.R.BadCompanies)
			if ln > 1 && i < ln-1 {
				o.R.BadCompanies[i] = o.R.BadCompanies[ln-1]
			}
			o.R.BadCompanies = o.R.BadCompanies[:ln-1]
			break
		}
	}

	return nil
}

func removeBadCompaniesFromCompaniesSlice(o *Company, related []*BadCompany) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Companies {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Companies)
			if ln > 1 && i < ln-1 {
				rel.R.Companies[i] = rel.R.Companies[ln-1]
			}
			rel.R.Companies = rel.R.Companies[:ln-1]
			break
		}
	}
}

// AddDaughterCompanyCompanyToCompanies adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.DaughterCompanyCompanyToCompanies.
// Sets related.R.DaughterCompany appropriately.
func (o *Company) AddDaughterCompanyCompanyToCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CompanyToCompany) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DaughterCompanyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"company_to_company\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"daughter_company_id"}),
				strmangle.WhereClause("\"", "\"", 2, companyToCompanyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MotherCompanyID, rel.DaughterCompanyID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DaughterCompanyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyR{
			DaughterCompanyCompanyToCompanies: related,
		}
	} else {
		o.R.DaughterCompanyCompanyToCompanies = append(o.R.DaughterCompanyCompanyToCompanies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &companyToCompanyR{
				DaughterCompany: o,
			}
		} else {
			rel.R.DaughterCompany = o
		}
	}
	return nil
}

// AddMotherCompanyCompanyToCompanies adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.MotherCompanyCompanyToCompanies.
// Sets related.R.MotherCompany appropriately.
func (o *Company) AddMotherCompanyCompanyToCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CompanyToCompany) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MotherCompanyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"company_to_company\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mother_company_id"}),
				strmangle.WhereClause("\"", "\"", 2, companyToCompanyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MotherCompanyID, rel.DaughterCompanyID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MotherCompanyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyR{
			MotherCompanyCompanyToCompanies: related,
		}
	} else {
		o.R.MotherCompanyCompanyToCompanies = append(o.R.MotherCompanyCompanyToCompanies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &companyToCompanyR{
				MotherCompany: o,
			}
		} else {
			rel.R.MotherCompany = o
		}
	}
	return nil
}

// AddCompanyToPeople adds the given related objects to the existing relationships
// of the company, optionally inserting them as new records.
// Appends related to o.R.CompanyToPeople.
// Sets related.R.Company appropriately.
func (o *Company) AddCompanyToPeople(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CompanyToPerson) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CompanyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"company_to_person\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"company_id"}),
				strmangle.WhereClause("\"", "\"", 2, companyToPersonPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.CompanyID, rel.PersonID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CompanyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &companyR{
			CompanyToPeople: related,
		}
	} else {
		o.R.CompanyToPeople = append(o.R.CompanyToPeople, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &companyToPersonR{
				Company: o,
			}
		} else {
			rel.R.Company = o
		}
	}
	return nil
}

// Companies retrieves all the records using an executor.
func Companies(mods ...qm.QueryMod) companyQuery {
	mods = append(mods, qm.From("\"companies\""))
	return companyQuery{NewQuery(mods...)}
}

// FindCompany retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompany(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Company, error) {
	companyObj := &Company{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"companies\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, companyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from companies")
	}

	return companyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Company) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no companies provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(companyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	companyInsertCacheMut.RLock()
	cache, cached := companyInsertCache[key]
	companyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			companyAllColumns,
			companyColumnsWithDefault,
			companyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(companyType, companyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(companyType, companyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"companies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"companies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into companies")
	}

	if !cached {
		companyInsertCacheMut.Lock()
		companyInsertCache[key] = cache
		companyInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Company.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Company) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	companyUpdateCacheMut.RLock()
	cache, cached := companyUpdateCache[key]
	companyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			companyAllColumns,
			companyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update companies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"companies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, companyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(companyType, companyMapping, append(wl, companyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update companies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for companies")
	}

	if !cached {
		companyUpdateCacheMut.Lock()
		companyUpdateCache[key] = cache
		companyUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q companyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for companies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for companies")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompanySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"companies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, companyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in company slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all company")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Company) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no companies provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(companyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	companyUpsertCacheMut.RLock()
	cache, cached := companyUpsertCache[key]
	companyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			companyAllColumns,
			companyColumnsWithDefault,
			companyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			companyAllColumns,
			companyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert companies, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(companyPrimaryKeyColumns))
			copy(conflict, companyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"companies\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(companyType, companyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(companyType, companyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert companies")
	}

	if !cached {
		companyUpsertCacheMut.Lock()
		companyUpsertCache[key] = cache
		companyUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Company record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Company) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Company provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), companyPrimaryKeyMapping)
	sql := "DELETE FROM \"companies\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from companies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for companies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q companyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no companyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from companies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for companies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompanySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"companies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, companyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from company slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for companies")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Company) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompany(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompanySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompanySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"companies\".* FROM \"companies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, companyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompanySlice")
	}

	*o = slice

	return nil
}

// CompanyExists checks if the Company row exists.
func CompanyExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"companies\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if companies exists")
	}

	return exists, nil
}

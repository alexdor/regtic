// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// CompanyToCompany is an object representing the database table.
type CompanyToCompany struct {
	MotherCompanyID   string            `boil:"mother_company_id" json:"motherCompanyID" toml:"motherCompanyID" yaml:"motherCompanyID"`
	DaughterCompanyID string            `boil:"daughter_company_id" json:"daughterCompanyID" toml:"daughterCompanyID" yaml:"daughterCompanyID"`
	Relations         types.StringArray `boil:"relations" json:"relations" toml:"relations" yaml:"relations"`
	VotingRights      float32           `boil:"voting_rights" json:"votingRights" toml:"votingRights" yaml:"votingRights"`
	Ownership         float32           `boil:"ownership" json:"ownership" toml:"ownership" yaml:"ownership"`

	R *companyToCompanyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L companyToCompanyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CompanyToCompanyColumns = struct {
	MotherCompanyID   string
	DaughterCompanyID string
	Relations         string
	VotingRights      string
	Ownership         string
}{
	MotherCompanyID:   "mother_company_id",
	DaughterCompanyID: "daughter_company_id",
	Relations:         "relations",
	VotingRights:      "voting_rights",
	Ownership:         "ownership",
}

// Generated where

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CompanyToCompanyWhere = struct {
	MotherCompanyID   whereHelperstring
	DaughterCompanyID whereHelperstring
	Relations         whereHelpertypes_StringArray
	VotingRights      whereHelperfloat32
	Ownership         whereHelperfloat32
}{
	MotherCompanyID:   whereHelperstring{field: "\"company_to_company\".\"mother_company_id\""},
	DaughterCompanyID: whereHelperstring{field: "\"company_to_company\".\"daughter_company_id\""},
	Relations:         whereHelpertypes_StringArray{field: "\"company_to_company\".\"relations\""},
	VotingRights:      whereHelperfloat32{field: "\"company_to_company\".\"voting_rights\""},
	Ownership:         whereHelperfloat32{field: "\"company_to_company\".\"ownership\""},
}

// CompanyToCompanyRels is where relationship names are stored.
var CompanyToCompanyRels = struct {
	DaughterCompany string
	MotherCompany   string
}{
	DaughterCompany: "DaughterCompany",
	MotherCompany:   "MotherCompany",
}

// companyToCompanyR is where relationships are stored.
type companyToCompanyR struct {
	DaughterCompany *Company
	MotherCompany   *Company
}

// NewStruct creates a new relationship struct
func (*companyToCompanyR) NewStruct() *companyToCompanyR {
	return &companyToCompanyR{}
}

// companyToCompanyL is where Load methods for each relationship are stored.
type companyToCompanyL struct{}

var (
	companyToCompanyAllColumns            = []string{"mother_company_id", "daughter_company_id", "relations", "voting_rights", "ownership"}
	companyToCompanyColumnsWithoutDefault = []string{"mother_company_id", "daughter_company_id"}
	companyToCompanyColumnsWithDefault    = []string{"relations", "voting_rights", "ownership"}
	companyToCompanyPrimaryKeyColumns     = []string{"mother_company_id", "daughter_company_id"}
)

type (
	// CompanyToCompanySlice is an alias for a slice of pointers to CompanyToCompany.
	// This should generally be used opposed to []CompanyToCompany.
	CompanyToCompanySlice []*CompanyToCompany

	companyToCompanyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	companyToCompanyType                 = reflect.TypeOf(&CompanyToCompany{})
	companyToCompanyMapping              = queries.MakeStructMapping(companyToCompanyType)
	companyToCompanyPrimaryKeyMapping, _ = queries.BindMapping(companyToCompanyType, companyToCompanyMapping, companyToCompanyPrimaryKeyColumns)
	companyToCompanyInsertCacheMut       sync.RWMutex
	companyToCompanyInsertCache          = make(map[string]insertCache)
	companyToCompanyUpdateCacheMut       sync.RWMutex
	companyToCompanyUpdateCache          = make(map[string]updateCache)
	companyToCompanyUpsertCacheMut       sync.RWMutex
	companyToCompanyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single companyToCompany record from the query.
func (q companyToCompanyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CompanyToCompany, error) {
	o := &CompanyToCompany{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for company_to_company")
	}

	return o, nil
}

// All returns all CompanyToCompany records from the query.
func (q companyToCompanyQuery) All(ctx context.Context, exec boil.ContextExecutor) (CompanyToCompanySlice, error) {
	var o []*CompanyToCompany

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CompanyToCompany slice")
	}

	return o, nil
}

// Count returns the count of all CompanyToCompany records in the query.
func (q companyToCompanyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count company_to_company rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q companyToCompanyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if company_to_company exists")
	}

	return count > 0, nil
}

// DaughterCompany pointed to by the foreign key.
func (o *CompanyToCompany) DaughterCompany(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DaughterCompanyID),
	}

	queryMods = append(queryMods, mods...)

	query := Companies(queryMods...)
	queries.SetFrom(query.Query, "\"companies\"")

	return query
}

// MotherCompany pointed to by the foreign key.
func (o *CompanyToCompany) MotherCompany(mods ...qm.QueryMod) companyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MotherCompanyID),
	}

	queryMods = append(queryMods, mods...)

	query := Companies(queryMods...)
	queries.SetFrom(query.Query, "\"companies\"")

	return query
}

// LoadDaughterCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (companyToCompanyL) LoadDaughterCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompanyToCompany interface{}, mods queries.Applicator) error {
	var slice []*CompanyToCompany
	var object *CompanyToCompany

	if singular {
		object = maybeCompanyToCompany.(*CompanyToCompany)
	} else {
		slice = *maybeCompanyToCompany.(*[]*CompanyToCompany)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyToCompanyR{}
		}
		args = append(args, object.DaughterCompanyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyToCompanyR{}
			}

			for _, a := range args {
				if a == obj.DaughterCompanyID {
					continue Outer
				}
			}

			args = append(args, obj.DaughterCompanyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`companies`), qm.WhereIn(`companies.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DaughterCompany = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.DaughterCompanyCompanyToCompanies = append(foreign.R.DaughterCompanyCompanyToCompanies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DaughterCompanyID == foreign.ID {
				local.R.DaughterCompany = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.DaughterCompanyCompanyToCompanies = append(foreign.R.DaughterCompanyCompanyToCompanies, local)
				break
			}
		}
	}

	return nil
}

// LoadMotherCompany allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (companyToCompanyL) LoadMotherCompany(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCompanyToCompany interface{}, mods queries.Applicator) error {
	var slice []*CompanyToCompany
	var object *CompanyToCompany

	if singular {
		object = maybeCompanyToCompany.(*CompanyToCompany)
	} else {
		slice = *maybeCompanyToCompany.(*[]*CompanyToCompany)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &companyToCompanyR{}
		}
		args = append(args, object.MotherCompanyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &companyToCompanyR{}
			}

			for _, a := range args {
				if a == obj.MotherCompanyID {
					continue Outer
				}
			}

			args = append(args, obj.MotherCompanyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`companies`), qm.WhereIn(`companies.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Company")
	}

	var resultSlice []*Company
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Company")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MotherCompany = foreign
		if foreign.R == nil {
			foreign.R = &companyR{}
		}
		foreign.R.MotherCompanyCompanyToCompanies = append(foreign.R.MotherCompanyCompanyToCompanies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MotherCompanyID == foreign.ID {
				local.R.MotherCompany = foreign
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.MotherCompanyCompanyToCompanies = append(foreign.R.MotherCompanyCompanyToCompanies, local)
				break
			}
		}
	}

	return nil
}

// SetDaughterCompany of the companyToCompany to the related item.
// Sets o.R.DaughterCompany to related.
// Adds o to related.R.DaughterCompanyCompanyToCompanies.
func (o *CompanyToCompany) SetDaughterCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"company_to_company\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"daughter_company_id"}),
		strmangle.WhereClause("\"", "\"", 2, companyToCompanyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MotherCompanyID, o.DaughterCompanyID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DaughterCompanyID = related.ID
	if o.R == nil {
		o.R = &companyToCompanyR{
			DaughterCompany: related,
		}
	} else {
		o.R.DaughterCompany = related
	}

	if related.R == nil {
		related.R = &companyR{
			DaughterCompanyCompanyToCompanies: CompanyToCompanySlice{o},
		}
	} else {
		related.R.DaughterCompanyCompanyToCompanies = append(related.R.DaughterCompanyCompanyToCompanies, o)
	}

	return nil
}

// SetMotherCompany of the companyToCompany to the related item.
// Sets o.R.MotherCompany to related.
// Adds o to related.R.MotherCompanyCompanyToCompanies.
func (o *CompanyToCompany) SetMotherCompany(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Company) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"company_to_company\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mother_company_id"}),
		strmangle.WhereClause("\"", "\"", 2, companyToCompanyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MotherCompanyID, o.DaughterCompanyID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MotherCompanyID = related.ID
	if o.R == nil {
		o.R = &companyToCompanyR{
			MotherCompany: related,
		}
	} else {
		o.R.MotherCompany = related
	}

	if related.R == nil {
		related.R = &companyR{
			MotherCompanyCompanyToCompanies: CompanyToCompanySlice{o},
		}
	} else {
		related.R.MotherCompanyCompanyToCompanies = append(related.R.MotherCompanyCompanyToCompanies, o)
	}

	return nil
}

// CompanyToCompanies retrieves all the records using an executor.
func CompanyToCompanies(mods ...qm.QueryMod) companyToCompanyQuery {
	mods = append(mods, qm.From("\"company_to_company\""))
	return companyToCompanyQuery{NewQuery(mods...)}
}

// FindCompanyToCompany retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompanyToCompany(ctx context.Context, exec boil.ContextExecutor, motherCompanyID string, daughterCompanyID string, selectCols ...string) (*CompanyToCompany, error) {
	companyToCompanyObj := &CompanyToCompany{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"company_to_company\" where \"mother_company_id\"=$1 AND \"daughter_company_id\"=$2", sel,
	)

	q := queries.Raw(query, motherCompanyID, daughterCompanyID)

	err := q.Bind(ctx, exec, companyToCompanyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from company_to_company")
	}

	return companyToCompanyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CompanyToCompany) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no company_to_company provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(companyToCompanyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	companyToCompanyInsertCacheMut.RLock()
	cache, cached := companyToCompanyInsertCache[key]
	companyToCompanyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			companyToCompanyAllColumns,
			companyToCompanyColumnsWithDefault,
			companyToCompanyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(companyToCompanyType, companyToCompanyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(companyToCompanyType, companyToCompanyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"company_to_company\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"company_to_company\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into company_to_company")
	}

	if !cached {
		companyToCompanyInsertCacheMut.Lock()
		companyToCompanyInsertCache[key] = cache
		companyToCompanyInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CompanyToCompany.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CompanyToCompany) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	companyToCompanyUpdateCacheMut.RLock()
	cache, cached := companyToCompanyUpdateCache[key]
	companyToCompanyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			companyToCompanyAllColumns,
			companyToCompanyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update company_to_company, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"company_to_company\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, companyToCompanyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(companyToCompanyType, companyToCompanyMapping, append(wl, companyToCompanyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update company_to_company row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for company_to_company")
	}

	if !cached {
		companyToCompanyUpdateCacheMut.Lock()
		companyToCompanyUpdateCache[key] = cache
		companyToCompanyUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q companyToCompanyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for company_to_company")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for company_to_company")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CompanyToCompanySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyToCompanyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"company_to_company\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, companyToCompanyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in companyToCompany slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all companyToCompany")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CompanyToCompany) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no company_to_company provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(companyToCompanyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	companyToCompanyUpsertCacheMut.RLock()
	cache, cached := companyToCompanyUpsertCache[key]
	companyToCompanyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			companyToCompanyAllColumns,
			companyToCompanyColumnsWithDefault,
			companyToCompanyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			companyToCompanyAllColumns,
			companyToCompanyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert company_to_company, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(companyToCompanyPrimaryKeyColumns))
			copy(conflict, companyToCompanyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"company_to_company\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(companyToCompanyType, companyToCompanyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(companyToCompanyType, companyToCompanyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert company_to_company")
	}

	if !cached {
		companyToCompanyUpsertCacheMut.Lock()
		companyToCompanyUpsertCache[key] = cache
		companyToCompanyUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CompanyToCompany record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CompanyToCompany) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CompanyToCompany provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), companyToCompanyPrimaryKeyMapping)
	sql := "DELETE FROM \"company_to_company\" WHERE \"mother_company_id\"=$1 AND \"daughter_company_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from company_to_company")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for company_to_company")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q companyToCompanyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no companyToCompanyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from company_to_company")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for company_to_company")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CompanyToCompanySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyToCompanyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"company_to_company\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, companyToCompanyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from companyToCompany slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for company_to_company")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CompanyToCompany) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCompanyToCompany(ctx, exec, o.MotherCompanyID, o.DaughterCompanyID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CompanyToCompanySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CompanyToCompanySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), companyToCompanyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"company_to_company\".* FROM \"company_to_company\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, companyToCompanyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CompanyToCompanySlice")
	}

	*o = slice

	return nil
}

// CompanyToCompanyExists checks if the CompanyToCompany row exists.
func CompanyToCompanyExists(ctx context.Context, exec boil.ContextExecutor, motherCompanyID string, daughterCompanyID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"company_to_company\" where \"mother_company_id\"=$1 AND \"daughter_company_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, motherCompanyID, daughterCompanyID)
	}

	row := exec.QueryRowContext(ctx, sql, motherCompanyID, daughterCompanyID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if company_to_company exists")
	}

	return exists, nil
}

// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("BadCompanies", testBadCompanies)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddresses)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNames)
	t.Run("BadPersons", testBadPersons)
	t.Run("BadPersonsAddresses", testBadPersonsAddresses)
	t.Run("BadPersonsAllNames", testBadPersonsAllNames)
	t.Run("Companies", testCompanies)
	t.Run("CompanyToCompanies", testCompanyToCompanies)
	t.Run("CompanyToPeople", testCompanyToPeople)
	t.Run("Persons", testPersons)
}

func TestDelete(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesDelete)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesDelete)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesDelete)
	t.Run("BadPersons", testBadPersonsDelete)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesDelete)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesDelete)
	t.Run("Companies", testCompaniesDelete)
	t.Run("CompanyToCompanies", testCompanyToCompaniesDelete)
	t.Run("CompanyToPeople", testCompanyToPeopleDelete)
	t.Run("Persons", testPersonsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesQueryDeleteAll)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesQueryDeleteAll)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesQueryDeleteAll)
	t.Run("BadPersons", testBadPersonsQueryDeleteAll)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesQueryDeleteAll)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesQueryDeleteAll)
	t.Run("Companies", testCompaniesQueryDeleteAll)
	t.Run("CompanyToCompanies", testCompanyToCompaniesQueryDeleteAll)
	t.Run("CompanyToPeople", testCompanyToPeopleQueryDeleteAll)
	t.Run("Persons", testPersonsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesSliceDeleteAll)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesSliceDeleteAll)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesSliceDeleteAll)
	t.Run("BadPersons", testBadPersonsSliceDeleteAll)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesSliceDeleteAll)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesSliceDeleteAll)
	t.Run("Companies", testCompaniesSliceDeleteAll)
	t.Run("CompanyToCompanies", testCompanyToCompaniesSliceDeleteAll)
	t.Run("CompanyToPeople", testCompanyToPeopleSliceDeleteAll)
	t.Run("Persons", testPersonsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesExists)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesExists)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesExists)
	t.Run("BadPersons", testBadPersonsExists)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesExists)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesExists)
	t.Run("Companies", testCompaniesExists)
	t.Run("CompanyToCompanies", testCompanyToCompaniesExists)
	t.Run("CompanyToPeople", testCompanyToPeopleExists)
	t.Run("Persons", testPersonsExists)
}

func TestFind(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesFind)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesFind)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesFind)
	t.Run("BadPersons", testBadPersonsFind)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesFind)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesFind)
	t.Run("Companies", testCompaniesFind)
	t.Run("CompanyToCompanies", testCompanyToCompaniesFind)
	t.Run("CompanyToPeople", testCompanyToPeopleFind)
	t.Run("Persons", testPersonsFind)
}

func TestBind(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesBind)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesBind)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesBind)
	t.Run("BadPersons", testBadPersonsBind)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesBind)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesBind)
	t.Run("Companies", testCompaniesBind)
	t.Run("CompanyToCompanies", testCompanyToCompaniesBind)
	t.Run("CompanyToPeople", testCompanyToPeopleBind)
	t.Run("Persons", testPersonsBind)
}

func TestOne(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesOne)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesOne)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesOne)
	t.Run("BadPersons", testBadPersonsOne)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesOne)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesOne)
	t.Run("Companies", testCompaniesOne)
	t.Run("CompanyToCompanies", testCompanyToCompaniesOne)
	t.Run("CompanyToPeople", testCompanyToPeopleOne)
	t.Run("Persons", testPersonsOne)
}

func TestAll(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesAll)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesAll)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesAll)
	t.Run("BadPersons", testBadPersonsAll)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesAll)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesAll)
	t.Run("Companies", testCompaniesAll)
	t.Run("CompanyToCompanies", testCompanyToCompaniesAll)
	t.Run("CompanyToPeople", testCompanyToPeopleAll)
	t.Run("Persons", testPersonsAll)
}

func TestCount(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesCount)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesCount)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesCount)
	t.Run("BadPersons", testBadPersonsCount)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesCount)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesCount)
	t.Run("Companies", testCompaniesCount)
	t.Run("CompanyToCompanies", testCompanyToCompaniesCount)
	t.Run("CompanyToPeople", testCompanyToPeopleCount)
	t.Run("Persons", testPersonsCount)
}

func TestInsert(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesInsert)
	t.Run("BadCompanies", testBadCompaniesInsertWhitelist)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesInsert)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesInsertWhitelist)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesInsert)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesInsertWhitelist)
	t.Run("BadPersons", testBadPersonsInsert)
	t.Run("BadPersons", testBadPersonsInsertWhitelist)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesInsert)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesInsertWhitelist)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesInsert)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesInsertWhitelist)
	t.Run("Companies", testCompaniesInsert)
	t.Run("Companies", testCompaniesInsertWhitelist)
	t.Run("CompanyToCompanies", testCompanyToCompaniesInsert)
	t.Run("CompanyToCompanies", testCompanyToCompaniesInsertWhitelist)
	t.Run("CompanyToPeople", testCompanyToPeopleInsert)
	t.Run("CompanyToPeople", testCompanyToPeopleInsertWhitelist)
	t.Run("Persons", testPersonsInsert)
	t.Run("Persons", testPersonsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BadCompaniesAddressToBadCompanyUsingBadCompany", testBadCompaniesAddressToOneBadCompanyUsingBadCompany)
	t.Run("BadCompaniesAllNameToBadCompanyUsingBadCompany", testBadCompaniesAllNameToOneBadCompanyUsingBadCompany)
	t.Run("BadPersonsAddressToBadPersonUsingBadPerson", testBadPersonsAddressToOneBadPersonUsingBadPerson)
	t.Run("BadPersonsAllNameToBadPersonUsingBadPerson", testBadPersonsAllNameToOneBadPersonUsingBadPerson)
	t.Run("CompanyToCompanyToCompanyUsingDaughterCompany", testCompanyToCompanyToOneCompanyUsingDaughterCompany)
	t.Run("CompanyToCompanyToCompanyUsingMotherCompany", testCompanyToCompanyToOneCompanyUsingMotherCompany)
	t.Run("CompanyToPersonToCompanyUsingCompany", testCompanyToPersonToOneCompanyUsingCompany)
	t.Run("CompanyToPersonToPersonUsingPerson", testCompanyToPersonToOnePersonUsingPerson)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("BadCompanyToBadCompaniesAddresses", testBadCompanyToManyBadCompaniesAddresses)
	t.Run("BadCompanyToBadCompaniesAllNames", testBadCompanyToManyBadCompaniesAllNames)
	t.Run("BadCompanyToCompanies", testBadCompanyToManyCompanies)
	t.Run("BadPersonToPersons", testBadPersonToManyPersons)
	t.Run("BadPersonToBadPersonsAddresses", testBadPersonToManyBadPersonsAddresses)
	t.Run("BadPersonToBadPersonsAllNames", testBadPersonToManyBadPersonsAllNames)
	t.Run("CompanyToBadCompanies", testCompanyToManyBadCompanies)
	t.Run("CompanyToDaughterCompanyCompanyToCompanies", testCompanyToManyDaughterCompanyCompanyToCompanies)
	t.Run("CompanyToMotherCompanyCompanyToCompanies", testCompanyToManyMotherCompanyCompanyToCompanies)
	t.Run("CompanyToCompanyToPeople", testCompanyToManyCompanyToPeople)
	t.Run("PersonToBadPersons", testPersonToManyBadPersons)
	t.Run("PersonToCompanyToPeople", testPersonToManyCompanyToPeople)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BadCompaniesAddressToBadCompanyUsingBadCompaniesAddresses", testBadCompaniesAddressToOneSetOpBadCompanyUsingBadCompany)
	t.Run("BadCompaniesAllNameToBadCompanyUsingBadCompaniesAllNames", testBadCompaniesAllNameToOneSetOpBadCompanyUsingBadCompany)
	t.Run("BadPersonsAddressToBadPersonUsingBadPersonsAddresses", testBadPersonsAddressToOneSetOpBadPersonUsingBadPerson)
	t.Run("BadPersonsAllNameToBadPersonUsingBadPersonsAllNames", testBadPersonsAllNameToOneSetOpBadPersonUsingBadPerson)
	t.Run("CompanyToCompanyToCompanyUsingDaughterCompanyCompanyToCompanies", testCompanyToCompanyToOneSetOpCompanyUsingDaughterCompany)
	t.Run("CompanyToCompanyToCompanyUsingMotherCompanyCompanyToCompanies", testCompanyToCompanyToOneSetOpCompanyUsingMotherCompany)
	t.Run("CompanyToPersonToCompanyUsingCompanyToPeople", testCompanyToPersonToOneSetOpCompanyUsingCompany)
	t.Run("CompanyToPersonToPersonUsingCompanyToPeople", testCompanyToPersonToOneSetOpPersonUsingPerson)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("BadCompaniesAddressToBadCompanyUsingBadCompaniesAddresses", testBadCompaniesAddressToOneRemoveOpBadCompanyUsingBadCompany)
	t.Run("BadCompaniesAllNameToBadCompanyUsingBadCompaniesAllNames", testBadCompaniesAllNameToOneRemoveOpBadCompanyUsingBadCompany)
	t.Run("BadPersonsAddressToBadPersonUsingBadPersonsAddresses", testBadPersonsAddressToOneRemoveOpBadPersonUsingBadPerson)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("BadCompanyToBadCompaniesAddresses", testBadCompanyToManyAddOpBadCompaniesAddresses)
	t.Run("BadCompanyToBadCompaniesAllNames", testBadCompanyToManyAddOpBadCompaniesAllNames)
	t.Run("BadCompanyToCompanies", testBadCompanyToManyAddOpCompanies)
	t.Run("BadPersonToPersons", testBadPersonToManyAddOpPersons)
	t.Run("BadPersonToBadPersonsAddresses", testBadPersonToManyAddOpBadPersonsAddresses)
	t.Run("BadPersonToBadPersonsAllNames", testBadPersonToManyAddOpBadPersonsAllNames)
	t.Run("CompanyToBadCompanies", testCompanyToManyAddOpBadCompanies)
	t.Run("CompanyToDaughterCompanyCompanyToCompanies", testCompanyToManyAddOpDaughterCompanyCompanyToCompanies)
	t.Run("CompanyToMotherCompanyCompanyToCompanies", testCompanyToManyAddOpMotherCompanyCompanyToCompanies)
	t.Run("CompanyToCompanyToPeople", testCompanyToManyAddOpCompanyToPeople)
	t.Run("PersonToBadPersons", testPersonToManyAddOpBadPersons)
	t.Run("PersonToCompanyToPeople", testPersonToManyAddOpCompanyToPeople)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("BadCompanyToBadCompaniesAddresses", testBadCompanyToManySetOpBadCompaniesAddresses)
	t.Run("BadCompanyToBadCompaniesAllNames", testBadCompanyToManySetOpBadCompaniesAllNames)
	t.Run("BadCompanyToCompanies", testBadCompanyToManySetOpCompanies)
	t.Run("BadPersonToPersons", testBadPersonToManySetOpPersons)
	t.Run("BadPersonToBadPersonsAddresses", testBadPersonToManySetOpBadPersonsAddresses)
	t.Run("CompanyToBadCompanies", testCompanyToManySetOpBadCompanies)
	t.Run("PersonToBadPersons", testPersonToManySetOpBadPersons)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("BadCompanyToBadCompaniesAddresses", testBadCompanyToManyRemoveOpBadCompaniesAddresses)
	t.Run("BadCompanyToBadCompaniesAllNames", testBadCompanyToManyRemoveOpBadCompaniesAllNames)
	t.Run("BadCompanyToCompanies", testBadCompanyToManyRemoveOpCompanies)
	t.Run("BadPersonToPersons", testBadPersonToManyRemoveOpPersons)
	t.Run("BadPersonToBadPersonsAddresses", testBadPersonToManyRemoveOpBadPersonsAddresses)
	t.Run("CompanyToBadCompanies", testCompanyToManyRemoveOpBadCompanies)
	t.Run("PersonToBadPersons", testPersonToManyRemoveOpBadPersons)
}

func TestReload(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesReload)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesReload)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesReload)
	t.Run("BadPersons", testBadPersonsReload)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesReload)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesReload)
	t.Run("Companies", testCompaniesReload)
	t.Run("CompanyToCompanies", testCompanyToCompaniesReload)
	t.Run("CompanyToPeople", testCompanyToPeopleReload)
	t.Run("Persons", testPersonsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesReloadAll)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesReloadAll)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesReloadAll)
	t.Run("BadPersons", testBadPersonsReloadAll)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesReloadAll)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesReloadAll)
	t.Run("Companies", testCompaniesReloadAll)
	t.Run("CompanyToCompanies", testCompanyToCompaniesReloadAll)
	t.Run("CompanyToPeople", testCompanyToPeopleReloadAll)
	t.Run("Persons", testPersonsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesSelect)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesSelect)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesSelect)
	t.Run("BadPersons", testBadPersonsSelect)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesSelect)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesSelect)
	t.Run("Companies", testCompaniesSelect)
	t.Run("CompanyToCompanies", testCompanyToCompaniesSelect)
	t.Run("CompanyToPeople", testCompanyToPeopleSelect)
	t.Run("Persons", testPersonsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesUpdate)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesUpdate)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesUpdate)
	t.Run("BadPersons", testBadPersonsUpdate)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesUpdate)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesUpdate)
	t.Run("Companies", testCompaniesUpdate)
	t.Run("CompanyToCompanies", testCompanyToCompaniesUpdate)
	t.Run("CompanyToPeople", testCompanyToPeopleUpdate)
	t.Run("Persons", testPersonsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("BadCompanies", testBadCompaniesSliceUpdateAll)
	t.Run("BadCompaniesAddresses", testBadCompaniesAddressesSliceUpdateAll)
	t.Run("BadCompaniesAllNames", testBadCompaniesAllNamesSliceUpdateAll)
	t.Run("BadPersons", testBadPersonsSliceUpdateAll)
	t.Run("BadPersonsAddresses", testBadPersonsAddressesSliceUpdateAll)
	t.Run("BadPersonsAllNames", testBadPersonsAllNamesSliceUpdateAll)
	t.Run("Companies", testCompaniesSliceUpdateAll)
	t.Run("CompanyToCompanies", testCompanyToCompaniesSliceUpdateAll)
	t.Run("CompanyToPeople", testCompanyToPeopleSliceUpdateAll)
	t.Run("Persons", testPersonsSliceUpdateAll)
}

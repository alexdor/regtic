// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// BadCompany is an object representing the database table.
type BadCompany struct {
	ID                     string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	UpdatedAt              time.Time         `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt              time.Time         `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	Name                   string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	NameVector             null.String       `boil:"name_vector" json:"nameVector,omitempty" toml:"nameVector" yaml:"nameVector,omitempty"`
	Address                null.String       `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	Source                 string            `boil:"source" json:"source" toml:"source" yaml:"source"`
	CitizenshipRegion      null.String       `boil:"citizenship_region" json:"citizenshipRegion,omitempty" toml:"citizenshipRegion" yaml:"citizenshipRegion,omitempty"`
	Type                   string            `boil:"type" json:"type" toml:"type" yaml:"type"`
	CitizenshipCountryCode types.StringArray `boil:"citizenship_country_code" json:"citizenshipCountryCode" toml:"citizenshipCountryCode" yaml:"citizenshipCountryCode"`

	R *badCompanyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L badCompanyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BadCompanyColumns = struct {
	ID                     string
	UpdatedAt              string
	CreatedAt              string
	Name                   string
	NameVector             string
	Address                string
	Source                 string
	CitizenshipRegion      string
	Type                   string
	CitizenshipCountryCode string
}{
	ID:                     "id",
	UpdatedAt:              "updated_at",
	CreatedAt:              "created_at",
	Name:                   "name",
	NameVector:             "name_vector",
	Address:                "address",
	Source:                 "source",
	CitizenshipRegion:      "citizenship_region",
	Type:                   "type",
	CitizenshipCountryCode: "citizenship_country_code",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BadCompanyWhere = struct {
	ID                     whereHelperstring
	UpdatedAt              whereHelpertime_Time
	CreatedAt              whereHelpertime_Time
	Name                   whereHelperstring
	NameVector             whereHelpernull_String
	Address                whereHelpernull_String
	Source                 whereHelperstring
	CitizenshipRegion      whereHelpernull_String
	Type                   whereHelperstring
	CitizenshipCountryCode whereHelpertypes_StringArray
}{
	ID:                     whereHelperstring{field: "\"bad_companies\".\"id\""},
	UpdatedAt:              whereHelpertime_Time{field: "\"bad_companies\".\"updated_at\""},
	CreatedAt:              whereHelpertime_Time{field: "\"bad_companies\".\"created_at\""},
	Name:                   whereHelperstring{field: "\"bad_companies\".\"name\""},
	NameVector:             whereHelpernull_String{field: "\"bad_companies\".\"name_vector\""},
	Address:                whereHelpernull_String{field: "\"bad_companies\".\"address\""},
	Source:                 whereHelperstring{field: "\"bad_companies\".\"source\""},
	CitizenshipRegion:      whereHelpernull_String{field: "\"bad_companies\".\"citizenship_region\""},
	Type:                   whereHelperstring{field: "\"bad_companies\".\"type\""},
	CitizenshipCountryCode: whereHelpertypes_StringArray{field: "\"bad_companies\".\"citizenship_country_code\""},
}

// BadCompanyRels is where relationship names are stored.
var BadCompanyRels = struct {
	BadCompaniesAddresses string
	BadCompaniesAllNames  string
	Companies             string
}{
	BadCompaniesAddresses: "BadCompaniesAddresses",
	BadCompaniesAllNames:  "BadCompaniesAllNames",
	Companies:             "Companies",
}

// badCompanyR is where relationships are stored.
type badCompanyR struct {
	BadCompaniesAddresses BadCompaniesAddressSlice
	BadCompaniesAllNames  BadCompaniesAllNameSlice
	Companies             CompanySlice
}

// NewStruct creates a new relationship struct
func (*badCompanyR) NewStruct() *badCompanyR {
	return &badCompanyR{}
}

// badCompanyL is where Load methods for each relationship are stored.
type badCompanyL struct{}

var (
	badCompanyAllColumns            = []string{"id", "updated_at", "created_at", "name", "name_vector", "address", "source", "citizenship_region", "type", "citizenship_country_code"}
	badCompanyColumnsWithoutDefault = []string{"name", "name_vector", "address", "source", "citizenship_region", "type"}
	badCompanyColumnsWithDefault    = []string{"id", "updated_at", "created_at", "citizenship_country_code"}
	badCompanyPrimaryKeyColumns     = []string{"id"}
)

type (
	// BadCompanySlice is an alias for a slice of pointers to BadCompany.
	// This should generally be used opposed to []BadCompany.
	BadCompanySlice []*BadCompany

	badCompanyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	badCompanyType                 = reflect.TypeOf(&BadCompany{})
	badCompanyMapping              = queries.MakeStructMapping(badCompanyType)
	badCompanyPrimaryKeyMapping, _ = queries.BindMapping(badCompanyType, badCompanyMapping, badCompanyPrimaryKeyColumns)
	badCompanyInsertCacheMut       sync.RWMutex
	badCompanyInsertCache          = make(map[string]insertCache)
	badCompanyUpdateCacheMut       sync.RWMutex
	badCompanyUpdateCache          = make(map[string]updateCache)
	badCompanyUpsertCacheMut       sync.RWMutex
	badCompanyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single badCompany record from the query.
func (q badCompanyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BadCompany, error) {
	o := &BadCompany{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bad_companies")
	}

	return o, nil
}

// All returns all BadCompany records from the query.
func (q badCompanyQuery) All(ctx context.Context, exec boil.ContextExecutor) (BadCompanySlice, error) {
	var o []*BadCompany

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BadCompany slice")
	}

	return o, nil
}

// Count returns the count of all BadCompany records in the query.
func (q badCompanyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bad_companies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q badCompanyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bad_companies exists")
	}

	return count > 0, nil
}

// BadCompaniesAddresses retrieves all the bad_companies_address's BadCompaniesAddresses with an executor.
func (o *BadCompany) BadCompaniesAddresses(mods ...qm.QueryMod) badCompaniesAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bad_companies_addresses\".\"bad_company_id\"=?", o.ID),
	)

	query := BadCompaniesAddresses(queryMods...)
	queries.SetFrom(query.Query, "\"bad_companies_addresses\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"bad_companies_addresses\".*"})
	}

	return query
}

// BadCompaniesAllNames retrieves all the bad_companies_all_name's BadCompaniesAllNames with an executor.
func (o *BadCompany) BadCompaniesAllNames(mods ...qm.QueryMod) badCompaniesAllNameQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bad_companies_all_names\".\"bad_company_id\"=?", o.ID),
	)

	query := BadCompaniesAllNames(queryMods...)
	queries.SetFrom(query.Query, "\"bad_companies_all_names\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"bad_companies_all_names\".*"})
	}

	return query
}

// Companies retrieves all the company's Companies with an executor.
func (o *BadCompany) Companies(mods ...qm.QueryMod) companyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"bad_company_to_company\" on \"companies\".\"id\" = \"bad_company_to_company\".\"company_id\""),
		qm.Where("\"bad_company_to_company\".\"bad_company_id\"=?", o.ID),
	)

	query := Companies(queryMods...)
	queries.SetFrom(query.Query, "\"companies\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"companies\".*"})
	}

	return query
}

// LoadBadCompaniesAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (badCompanyL) LoadBadCompaniesAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBadCompany interface{}, mods queries.Applicator) error {
	var slice []*BadCompany
	var object *BadCompany

	if singular {
		object = maybeBadCompany.(*BadCompany)
	} else {
		slice = *maybeBadCompany.(*[]*BadCompany)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &badCompanyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &badCompanyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`bad_companies_addresses`), qm.WhereIn(`bad_companies_addresses.bad_company_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bad_companies_addresses")
	}

	var resultSlice []*BadCompaniesAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bad_companies_addresses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bad_companies_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bad_companies_addresses")
	}

	if singular {
		object.R.BadCompaniesAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &badCompaniesAddressR{}
			}
			foreign.R.BadCompany = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BadCompanyID) {
				local.R.BadCompaniesAddresses = append(local.R.BadCompaniesAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &badCompaniesAddressR{}
				}
				foreign.R.BadCompany = local
				break
			}
		}
	}

	return nil
}

// LoadBadCompaniesAllNames allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (badCompanyL) LoadBadCompaniesAllNames(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBadCompany interface{}, mods queries.Applicator) error {
	var slice []*BadCompany
	var object *BadCompany

	if singular {
		object = maybeBadCompany.(*BadCompany)
	} else {
		slice = *maybeBadCompany.(*[]*BadCompany)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &badCompanyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &badCompanyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`bad_companies_all_names`), qm.WhereIn(`bad_companies_all_names.bad_company_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bad_companies_all_names")
	}

	var resultSlice []*BadCompaniesAllName
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bad_companies_all_names")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bad_companies_all_names")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bad_companies_all_names")
	}

	if singular {
		object.R.BadCompaniesAllNames = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &badCompaniesAllNameR{}
			}
			foreign.R.BadCompany = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BadCompanyID) {
				local.R.BadCompaniesAllNames = append(local.R.BadCompaniesAllNames, foreign)
				if foreign.R == nil {
					foreign.R = &badCompaniesAllNameR{}
				}
				foreign.R.BadCompany = local
				break
			}
		}
	}

	return nil
}

// LoadCompanies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (badCompanyL) LoadCompanies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBadCompany interface{}, mods queries.Applicator) error {
	var slice []*BadCompany
	var object *BadCompany

	if singular {
		object = maybeBadCompany.(*BadCompany)
	} else {
		slice = *maybeBadCompany.(*[]*BadCompany)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &badCompanyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &badCompanyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"companies\".*, \"a\".\"bad_company_id\""),
		qm.From("\"companies\""),
		qm.InnerJoin("\"bad_company_to_company\" as \"a\" on \"companies\".\"id\" = \"a\".\"company_id\""),
		qm.WhereIn("\"a\".\"bad_company_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load companies")
	}

	var resultSlice []*Company

	var localJoinCols []string
	for results.Next() {
		one := new(Company)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Vat, &one.StartingDate, &one.CountryCode, &one.UpdatedAt, &one.CreatedAt, &one.Name, &one.Status, &one.StatusNotes, &one.NameVector, &one.Type, &one.Street, &one.Region, &one.ZipCode, &one.City, &one.Address, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for companies")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice companies")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on companies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for companies")
	}

	if singular {
		object.R.Companies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &companyR{}
			}
			foreign.R.BadCompanies = append(foreign.R.BadCompanies, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Companies = append(local.R.Companies, foreign)
				if foreign.R == nil {
					foreign.R = &companyR{}
				}
				foreign.R.BadCompanies = append(foreign.R.BadCompanies, local)
				break
			}
		}
	}

	return nil
}

// AddBadCompaniesAddresses adds the given related objects to the existing relationships
// of the bad_company, optionally inserting them as new records.
// Appends related to o.R.BadCompaniesAddresses.
// Sets related.R.BadCompany appropriately.
func (o *BadCompany) AddBadCompaniesAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BadCompaniesAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BadCompanyID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bad_companies_addresses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"bad_company_id"}),
				strmangle.WhereClause("\"", "\"", 2, badCompaniesAddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BadCompanyID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &badCompanyR{
			BadCompaniesAddresses: related,
		}
	} else {
		o.R.BadCompaniesAddresses = append(o.R.BadCompaniesAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &badCompaniesAddressR{
				BadCompany: o,
			}
		} else {
			rel.R.BadCompany = o
		}
	}
	return nil
}

// SetBadCompaniesAddresses removes all previously related items of the
// bad_company replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BadCompany's BadCompaniesAddresses accordingly.
// Replaces o.R.BadCompaniesAddresses with related.
// Sets related.R.BadCompany's BadCompaniesAddresses accordingly.
func (o *BadCompany) SetBadCompaniesAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BadCompaniesAddress) error {
	query := "update \"bad_companies_addresses\" set \"bad_company_id\" = null where \"bad_company_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BadCompaniesAddresses {
			queries.SetScanner(&rel.BadCompanyID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BadCompany = nil
		}

		o.R.BadCompaniesAddresses = nil
	}
	return o.AddBadCompaniesAddresses(ctx, exec, insert, related...)
}

// RemoveBadCompaniesAddresses relationships from objects passed in.
// Removes related items from R.BadCompaniesAddresses (uses pointer comparison, removal does not keep order)
// Sets related.R.BadCompany.
func (o *BadCompany) RemoveBadCompaniesAddresses(ctx context.Context, exec boil.ContextExecutor, related ...*BadCompaniesAddress) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BadCompanyID, nil)
		if rel.R != nil {
			rel.R.BadCompany = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("bad_company_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BadCompaniesAddresses {
			if rel != ri {
				continue
			}

			ln := len(o.R.BadCompaniesAddresses)
			if ln > 1 && i < ln-1 {
				o.R.BadCompaniesAddresses[i] = o.R.BadCompaniesAddresses[ln-1]
			}
			o.R.BadCompaniesAddresses = o.R.BadCompaniesAddresses[:ln-1]
			break
		}
	}

	return nil
}

// AddBadCompaniesAllNames adds the given related objects to the existing relationships
// of the bad_company, optionally inserting them as new records.
// Appends related to o.R.BadCompaniesAllNames.
// Sets related.R.BadCompany appropriately.
func (o *BadCompany) AddBadCompaniesAllNames(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BadCompaniesAllName) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BadCompanyID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bad_companies_all_names\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"bad_company_id"}),
				strmangle.WhereClause("\"", "\"", 2, badCompaniesAllNamePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BadCompanyID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &badCompanyR{
			BadCompaniesAllNames: related,
		}
	} else {
		o.R.BadCompaniesAllNames = append(o.R.BadCompaniesAllNames, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &badCompaniesAllNameR{
				BadCompany: o,
			}
		} else {
			rel.R.BadCompany = o
		}
	}
	return nil
}

// SetBadCompaniesAllNames removes all previously related items of the
// bad_company replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BadCompany's BadCompaniesAllNames accordingly.
// Replaces o.R.BadCompaniesAllNames with related.
// Sets related.R.BadCompany's BadCompaniesAllNames accordingly.
func (o *BadCompany) SetBadCompaniesAllNames(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BadCompaniesAllName) error {
	query := "update \"bad_companies_all_names\" set \"bad_company_id\" = null where \"bad_company_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BadCompaniesAllNames {
			queries.SetScanner(&rel.BadCompanyID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BadCompany = nil
		}

		o.R.BadCompaniesAllNames = nil
	}
	return o.AddBadCompaniesAllNames(ctx, exec, insert, related...)
}

// RemoveBadCompaniesAllNames relationships from objects passed in.
// Removes related items from R.BadCompaniesAllNames (uses pointer comparison, removal does not keep order)
// Sets related.R.BadCompany.
func (o *BadCompany) RemoveBadCompaniesAllNames(ctx context.Context, exec boil.ContextExecutor, related ...*BadCompaniesAllName) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BadCompanyID, nil)
		if rel.R != nil {
			rel.R.BadCompany = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("bad_company_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BadCompaniesAllNames {
			if rel != ri {
				continue
			}

			ln := len(o.R.BadCompaniesAllNames)
			if ln > 1 && i < ln-1 {
				o.R.BadCompaniesAllNames[i] = o.R.BadCompaniesAllNames[ln-1]
			}
			o.R.BadCompaniesAllNames = o.R.BadCompaniesAllNames[:ln-1]
			break
		}
	}

	return nil
}

// AddCompanies adds the given related objects to the existing relationships
// of the bad_company, optionally inserting them as new records.
// Appends related to o.R.Companies.
// Sets related.R.BadCompanies appropriately.
func (o *BadCompany) AddCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Company) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"bad_company_to_company\" (\"bad_company_id\", \"company_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &badCompanyR{
			Companies: related,
		}
	} else {
		o.R.Companies = append(o.R.Companies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &companyR{
				BadCompanies: BadCompanySlice{o},
			}
		} else {
			rel.R.BadCompanies = append(rel.R.BadCompanies, o)
		}
	}
	return nil
}

// SetCompanies removes all previously related items of the
// bad_company replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BadCompanies's Companies accordingly.
// Replaces o.R.Companies with related.
// Sets related.R.BadCompanies's Companies accordingly.
func (o *BadCompany) SetCompanies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Company) error {
	query := "delete from \"bad_company_to_company\" where \"bad_company_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeCompaniesFromBadCompaniesSlice(o, related)
	if o.R != nil {
		o.R.Companies = nil
	}
	return o.AddCompanies(ctx, exec, insert, related...)
}

// RemoveCompanies relationships from objects passed in.
// Removes related items from R.Companies (uses pointer comparison, removal does not keep order)
// Sets related.R.BadCompanies.
func (o *BadCompany) RemoveCompanies(ctx context.Context, exec boil.ContextExecutor, related ...*Company) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"bad_company_to_company\" where \"bad_company_id\" = $1 and \"company_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeCompaniesFromBadCompaniesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Companies {
			if rel != ri {
				continue
			}

			ln := len(o.R.Companies)
			if ln > 1 && i < ln-1 {
				o.R.Companies[i] = o.R.Companies[ln-1]
			}
			o.R.Companies = o.R.Companies[:ln-1]
			break
		}
	}

	return nil
}

func removeCompaniesFromBadCompaniesSlice(o *BadCompany, related []*Company) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.BadCompanies {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.BadCompanies)
			if ln > 1 && i < ln-1 {
				rel.R.BadCompanies[i] = rel.R.BadCompanies[ln-1]
			}
			rel.R.BadCompanies = rel.R.BadCompanies[:ln-1]
			break
		}
	}
}

// BadCompanies retrieves all the records using an executor.
func BadCompanies(mods ...qm.QueryMod) badCompanyQuery {
	mods = append(mods, qm.From("\"bad_companies\""))
	return badCompanyQuery{NewQuery(mods...)}
}

// FindBadCompany retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBadCompany(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*BadCompany, error) {
	badCompanyObj := &BadCompany{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bad_companies\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, badCompanyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bad_companies")
	}

	return badCompanyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BadCompany) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bad_companies provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(badCompanyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	badCompanyInsertCacheMut.RLock()
	cache, cached := badCompanyInsertCache[key]
	badCompanyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			badCompanyAllColumns,
			badCompanyColumnsWithDefault,
			badCompanyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(badCompanyType, badCompanyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(badCompanyType, badCompanyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bad_companies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bad_companies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bad_companies")
	}

	if !cached {
		badCompanyInsertCacheMut.Lock()
		badCompanyInsertCache[key] = cache
		badCompanyInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the BadCompany.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BadCompany) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	badCompanyUpdateCacheMut.RLock()
	cache, cached := badCompanyUpdateCache[key]
	badCompanyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			badCompanyAllColumns,
			badCompanyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bad_companies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bad_companies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, badCompanyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(badCompanyType, badCompanyMapping, append(wl, badCompanyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bad_companies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bad_companies")
	}

	if !cached {
		badCompanyUpdateCacheMut.Lock()
		badCompanyUpdateCache[key] = cache
		badCompanyUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q badCompanyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bad_companies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bad_companies")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BadCompanySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badCompanyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bad_companies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, badCompanyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in badCompany slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all badCompany")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BadCompany) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bad_companies provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(badCompanyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	badCompanyUpsertCacheMut.RLock()
	cache, cached := badCompanyUpsertCache[key]
	badCompanyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			badCompanyAllColumns,
			badCompanyColumnsWithDefault,
			badCompanyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			badCompanyAllColumns,
			badCompanyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bad_companies, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(badCompanyPrimaryKeyColumns))
			copy(conflict, badCompanyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bad_companies\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(badCompanyType, badCompanyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(badCompanyType, badCompanyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bad_companies")
	}

	if !cached {
		badCompanyUpsertCacheMut.Lock()
		badCompanyUpsertCache[key] = cache
		badCompanyUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single BadCompany record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BadCompany) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BadCompany provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), badCompanyPrimaryKeyMapping)
	sql := "DELETE FROM \"bad_companies\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bad_companies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bad_companies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q badCompanyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no badCompanyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bad_companies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bad_companies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BadCompanySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badCompanyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bad_companies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, badCompanyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from badCompany slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bad_companies")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BadCompany) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBadCompany(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BadCompanySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BadCompanySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), badCompanyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bad_companies\".* FROM \"bad_companies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, badCompanyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BadCompanySlice")
	}

	*o = slice

	return nil
}

// BadCompanyExists checks if the BadCompany row exists.
func BadCompanyExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bad_companies\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bad_companies exists")
	}

	return exists, nil
}
